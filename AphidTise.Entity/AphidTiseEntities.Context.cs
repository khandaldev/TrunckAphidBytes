

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace AphidTise.Entity
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;


public partial class jobseeders_com_aphidbyteEntities : DbContext
{
    public jobseeders_com_aphidbyteEntities()
        : base("name=jobseeders_com_aphidbyteEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public DbSet<SocialNetworkLogin> SocialNetworkLogins { get; set; }

    public DbSet<tbl_BCMSErrorLog> tbl_BCMSErrorLog { get; set; }

    public DbSet<tbl_ByterMessage> tbl_ByterMessage { get; set; }

    public DbSet<tbl_ChannelSubscription> tbl_ChannelSubscription { get; set; }

    public DbSet<tbl_FeedBack> tbl_FeedBack { get; set; }

    public DbSet<tbl_Message> tbl_Message { get; set; }

    public DbSet<tbl_MTUserSubscription> tbl_MTUserSubscription { get; set; }

    public DbSet<tbl_PlayList> tbl_PlayList { get; set; }

    public DbSet<tbl_SendLinkToMT> tbl_SendLinkToMT { get; set; }

    public DbSet<tbl_SocialNetworkStatus> tbl_SocialNetworkStatus { get; set; }

    public DbSet<tbl_Surveys> tbl_Surveys { get; set; }

    public DbSet<tbl_TotalCredits> tbl_TotalCredits { get; set; }

    public DbSet<tbl_UrlLinkSites> tbl_UrlLinkSites { get; set; }

    public DbSet<tbl_UserInfo> tbl_UserInfo { get; set; }

    public DbSet<tblAd> tblAds { get; set; }

    public DbSet<tblAllGenerateClone> tblAllGenerateClones { get; set; }

    public DbSet<tblAudioInterruption> tblAudioInterruptions { get; set; }

    public DbSet<tblBasicGenerateClone> tblBasicGenerateClones { get; set; }

    public DbSet<tblCategory> tblCategories { get; set; }

    public DbSet<tblChannelPage> tblChannelPages { get; set; }

    public DbSet<tblCreateLinkPost> tblCreateLinkPosts { get; set; }

    public DbSet<tblCreditDetail> tblCreditDetails { get; set; }

    public DbSet<tblDataStoragePlan> tblDataStoragePlans { get; set; }

    public DbSet<tblFavourite> tblFavourites { get; set; }

    public DbSet<tblForgetPassword> tblForgetPasswords { get; set; }

    public DbSet<tblInterruptedBasicAudioFile> tblInterruptedBasicAudioFiles { get; set; }

    public DbSet<tblInterruptedFile> tblInterruptedFiles { get; set; }

    public DbSet<tblMasGenClonesType> tblMasGenClonesTypes { get; set; }

    public DbSet<tblMasterAccountType> tblMasterAccountTypes { get; set; }

    public DbSet<tblMasterAdsType> tblMasterAdsTypes { get; set; }

    public DbSet<tblMasterCatType> tblMasterCatTypes { get; set; }

    public DbSet<tblMasterCredit> tblMasterCredits { get; set; }

    public DbSet<tblMerchantAccount> tblMerchantAccounts { get; set; }

    public DbSet<tblPersonAddress> tblPersonAddresses { get; set; }

    public DbSet<tblPostingStatu> tblPostingStatus { get; set; }

    public DbSet<tblPremiumGeterateClone> tblPremiumGeterateClones { get; set; }

    public DbSet<tblRelease> tblReleases { get; set; }

    public DbSet<tblReleaseUpdate> tblReleaseUpdates { get; set; }

    public DbSet<tblSecurityQuestion> tblSecurityQuestions { get; set; }

    public DbSet<tblSocialNetwork> tblSocialNetworks { get; set; }

    public DbSet<tblSurveyQuestion> tblSurveyQuestions { get; set; }

    public DbSet<tblTool> tblTools { get; set; }

    public DbSet<tblToolsInfo> tblToolsInfoes { get; set; }

    public DbSet<tblUserActivation> tblUserActivations { get; set; }

    public DbSet<tblUsersSponsored> tblUsersSponsoreds { get; set; }

    public DbSet<tblVideoInterruption> tblVideoInterruptions { get; set; }

    public DbSet<tblWaterMarkUpInterruption> tblWaterMarkUpInterruptions { get; set; }

    public DbSet<tblAdmin> tblAdmins { get; set; }

    public DbSet<tblToolFile> tblToolFiles { get; set; }

    public DbSet<tblUser> tblUsers { get; set; }

    public DbSet<tbl_AphidLabSoftware> tbl_AphidLabSoftware { get; set; }

    public DbSet<tbl_AphidLabVideoUpload> tbl_AphidLabVideoUpload { get; set; }

    public DbSet<tblAphidlabAccount> tblAphidlabAccounts { get; set; }

    public DbSet<tblAphidTiseAccount> tblAphidTiseAccounts { get; set; }

    public DbSet<tblPremiumAccount> tblPremiumAccounts { get; set; }

    public DbSet<tblByterAccount> tblByterAccounts { get; set; }

    public DbSet<tbl_Messages> tbl_Messages { get; set; }

    public DbSet<tblBasicAccount> tblBasicAccounts { get; set; }

    public DbSet<Feedback> Feedback { get; set; }

    public DbSet<TrainingBatch> TrainingBatch { get; set; }

    public DbSet<Users> Users { get; set; }

    public DbSet<Demo> Demo { get; set; }

    public DbSet<tblLoginTokens> tblLoginTokens { get; set; }

    public DbSet<tblAccountTypes> tblAccountTypes { get; set; }

    public DbSet<tblPremiumCodes> tblPremiumCodes { get; set; }

    public DbSet<tblByteExternalSource> tblByteExternalSource { get; set; }

    public DbSet<tblByteExternalSourceClone> tblByteExternalSourceClone { get; set; }

    public DbSet<tblByteSubType> tblByteSubType { get; set; }

    public DbSet<tblByteType> tblByteType { get; set; }

    public DbSet<tblCollaborators> tblCollaborators { get; set; }


    public virtual int sp_InsertUpdateImageInteruptionFileNew(Nullable<System.Guid> userId, string imageInterruption, string watermarkImageName, Nullable<bool> isActive, string flag)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var imageInterruptionParameter = imageInterruption != null ?
            new ObjectParameter("ImageInterruption", imageInterruption) :
            new ObjectParameter("ImageInterruption", typeof(string));


        var watermarkImageNameParameter = watermarkImageName != null ?
            new ObjectParameter("WatermarkImageName", watermarkImageName) :
            new ObjectParameter("WatermarkImageName", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateImageInteruptionFileNew", userIdParameter, imageInterruptionParameter, watermarkImageNameParameter, isActiveParameter, flagParameter);
    }


    public virtual ObjectResult<sp_ActivateUser_Result> sp_ActivateUser(string token, Nullable<int> flag, string username)
    {

        var tokenParameter = token != null ?
            new ObjectParameter("token", token) :
            new ObjectParameter("token", typeof(string));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(int));


        var usernameParameter = username != null ?
            new ObjectParameter("username", username) :
            new ObjectParameter("username", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActivateUser_Result>("sp_ActivateUser", tokenParameter, flagParameter, usernameParameter);
    }


    public virtual ObjectResult<sp_AddChannelSite_Result> sp_AddChannelSite(Nullable<System.Guid> aphid)
    {

        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddChannelSite_Result>("sp_AddChannelSite", aphidParameter);
    }


    public virtual int sp_AllGenerateClones(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string title, string tag, string artistName, string albumTitle, string audioFilePath, string uploadFilePath, string matrixFilePath, string composerName, string producer, string publisher, string selectedInteruptionFile, string interuptionStyle, string availableForDownload, string explicitContent, string uploadImageFilePath, string uploadPDFFilePath, string pagePercentage, string type, string pdfFilePath, string fileNames, string videoFilePath, string waterMarkMatrixImagePath, string waterMarkMatrixImageText, string videoCategory, string rARFilePath, string matrixImagePath, string creatotName, string trackingNumber, Nullable<int> catID, Nullable<int> genCloneID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isActive)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIdParameter = cloneId.HasValue ?
            new ObjectParameter("CloneId", cloneId) :
            new ObjectParameter("CloneId", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagParameter = tag != null ?
            new ObjectParameter("Tag", tag) :
            new ObjectParameter("Tag", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var uploadFilePathParameter = uploadFilePath != null ?
            new ObjectParameter("UploadFilePath", uploadFilePath) :
            new ObjectParameter("UploadFilePath", typeof(string));


        var matrixFilePathParameter = matrixFilePath != null ?
            new ObjectParameter("MatrixFilePath", matrixFilePath) :
            new ObjectParameter("MatrixFilePath", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInteruptionFileParameter = selectedInteruptionFile != null ?
            new ObjectParameter("SelectedInteruptionFile", selectedInteruptionFile) :
            new ObjectParameter("SelectedInteruptionFile", typeof(string));


        var interuptionStyleParameter = interuptionStyle != null ?
            new ObjectParameter("InteruptionStyle", interuptionStyle) :
            new ObjectParameter("InteruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var uploadImageFilePathParameter = uploadImageFilePath != null ?
            new ObjectParameter("UploadImageFilePath", uploadImageFilePath) :
            new ObjectParameter("UploadImageFilePath", typeof(string));


        var uploadPDFFilePathParameter = uploadPDFFilePath != null ?
            new ObjectParameter("UploadPDFFilePath", uploadPDFFilePath) :
            new ObjectParameter("UploadPDFFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pdfFilePathParameter = pdfFilePath != null ?
            new ObjectParameter("PdfFilePath", pdfFilePath) :
            new ObjectParameter("PdfFilePath", typeof(string));


        var fileNamesParameter = fileNames != null ?
            new ObjectParameter("FileNames", fileNames) :
            new ObjectParameter("FileNames", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var waterMarkMatrixImagePathParameter = waterMarkMatrixImagePath != null ?
            new ObjectParameter("WaterMarkMatrixImagePath", waterMarkMatrixImagePath) :
            new ObjectParameter("WaterMarkMatrixImagePath", typeof(string));


        var waterMarkMatrixImageTextParameter = waterMarkMatrixImageText != null ?
            new ObjectParameter("WaterMarkMatrixImageText", waterMarkMatrixImageText) :
            new ObjectParameter("WaterMarkMatrixImageText", typeof(string));


        var videoCategoryParameter = videoCategory != null ?
            new ObjectParameter("VideoCategory", videoCategory) :
            new ObjectParameter("VideoCategory", typeof(string));


        var rARFilePathParameter = rARFilePath != null ?
            new ObjectParameter("RARFilePath", rARFilePath) :
            new ObjectParameter("RARFilePath", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatotNameParameter = creatotName != null ?
            new ObjectParameter("CreatotName", creatotName) :
            new ObjectParameter("CreatotName", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        var genCloneIDParameter = genCloneID.HasValue ?
            new ObjectParameter("GenCloneID", genCloneID) :
            new ObjectParameter("GenCloneID", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AllGenerateClones", userIDParameter, cloneIdParameter, titleParameter, tagParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, uploadFilePathParameter, matrixFilePathParameter, composerNameParameter, producerParameter, publisherParameter, selectedInteruptionFileParameter, interuptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadImageFilePathParameter, uploadPDFFilePathParameter, pagePercentageParameter, typeParameter, pdfFilePathParameter, fileNamesParameter, videoFilePathParameter, waterMarkMatrixImagePathParameter, waterMarkMatrixImageTextParameter, videoCategoryParameter, rARFilePathParameter, matrixImagePathParameter, creatotNameParameter, trackingNumberParameter, catIDParameter, genCloneIDParameter, createdDateParameter, modifyDateParameter, isActiveParameter);
    }


    public virtual int sp_AudioInteruptionFile(Nullable<System.Guid> userId, string audioInterruptionFileName, string fileName, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var audioInterruptionFileNameParameter = audioInterruptionFileName != null ?
            new ObjectParameter("AudioInterruptionFileName", audioInterruptionFileName) :
            new ObjectParameter("AudioInterruptionFileName", typeof(string));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AudioInteruptionFile", userIdParameter, audioInterruptionFileNameParameter, fileNameParameter, isActiveParameter, createdDateParameter, modifiedDateParameter);
    }


    public virtual ObjectResult<sp_BytertblSocialNetwork_Result> sp_BytertblSocialNetwork(Nullable<System.Guid> aphidID, string trackingID)
    {

        var aphidIDParameter = aphidID.HasValue ?
            new ObjectParameter("AphidID", aphidID) :
            new ObjectParameter("AphidID", typeof(System.Guid));


        var trackingIDParameter = trackingID != null ?
            new ObjectParameter("TrackingID", trackingID) :
            new ObjectParameter("TrackingID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BytertblSocialNetwork_Result>("sp_BytertblSocialNetwork", aphidIDParameter, trackingIDParameter);
    }

        public virtual ObjectResult<sp_gettblUserSubscribe_Result> sp_gettblUserSubscribe(Nullable<System.Guid> subscribeUserId, Nullable<System.Guid> userId)
        {

            var subscribeUserIdParameter = subscribeUserId.HasValue ?
                new ObjectParameter("SubscribeUserId", subscribeUserId) :
                new ObjectParameter("SubscribeUserId", typeof(System.Guid));


            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));


            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_gettblUserSubscribe_Result>("sp_gettblUserSubscribe", subscribeUserIdParameter, userIdParameter);
        }


        public virtual ObjectResult<sp_ByterTest_Result> sp_ByterTest(Nullable<System.Guid> aphidID, string trackingNo, string channel)
    {

        var aphidIDParameter = aphidID.HasValue ?
            new ObjectParameter("AphidID", aphidID) :
            new ObjectParameter("AphidID", typeof(System.Guid));


        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        var channelParameter = channel != null ?
            new ObjectParameter("Channel", channel) :
            new ObjectParameter("Channel", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ByterTest_Result>("sp_ByterTest", aphidIDParameter, trackingNoParameter, channelParameter);
    }


    public virtual int sp_ChangePassword(string userid, string pass)
    {

        var useridParameter = userid != null ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(string));


        var passParameter = pass != null ?
            new ObjectParameter("pass", pass) :
            new ObjectParameter("pass", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangePassword", useridParameter, passParameter);
    }


    public virtual int sp_ChannelPageIns(Nullable<System.Guid> channelID, Nullable<System.Guid> userID, string channelImagePath, string channelBiography)
    {

        var channelIDParameter = channelID.HasValue ?
            new ObjectParameter("ChannelID", channelID) :
            new ObjectParameter("ChannelID", typeof(System.Guid));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var channelImagePathParameter = channelImagePath != null ?
            new ObjectParameter("ChannelImagePath", channelImagePath) :
            new ObjectParameter("ChannelImagePath", typeof(string));


        var channelBiographyParameter = channelBiography != null ?
            new ObjectParameter("ChannelBiography", channelBiography) :
            new ObjectParameter("ChannelBiography", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChannelPageIns", channelIDParameter, userIDParameter, channelImagePathParameter, channelBiographyParameter);
    }


    public virtual int sp_ChannelSubscription(Nullable<System.Guid> byterUserId, Nullable<System.Guid> premiumUserid, string channelImage, string tillte, Nullable<bool> status, Nullable<System.DateTime> subscribeDate, Nullable<System.Guid> channelID)
    {

        var byterUserIdParameter = byterUserId.HasValue ?
            new ObjectParameter("ByterUserId", byterUserId) :
            new ObjectParameter("ByterUserId", typeof(System.Guid));


        var premiumUseridParameter = premiumUserid.HasValue ?
            new ObjectParameter("PremiumUserid", premiumUserid) :
            new ObjectParameter("PremiumUserid", typeof(System.Guid));


        var channelImageParameter = channelImage != null ?
            new ObjectParameter("ChannelImage", channelImage) :
            new ObjectParameter("ChannelImage", typeof(string));


        var tillteParameter = tillte != null ?
            new ObjectParameter("Tillte", tillte) :
            new ObjectParameter("Tillte", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var subscribeDateParameter = subscribeDate.HasValue ?
            new ObjectParameter("SubscribeDate", subscribeDate) :
            new ObjectParameter("SubscribeDate", typeof(System.DateTime));


        var channelIDParameter = channelID.HasValue ?
            new ObjectParameter("ChannelID", channelID) :
            new ObjectParameter("ChannelID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChannelSubscription", byterUserIdParameter, premiumUseridParameter, channelImageParameter, tillteParameter, statusParameter, subscribeDateParameter, channelIDParameter);
    }


    public virtual int sp_CreditDetail(Nullable<System.Guid> aphid, string channel, string category, string file_Size, string path, string title, Nullable<System.DateTime> creationDate, Nullable<System.DateTime> modifyDate, string trackingID, Nullable<bool> isActive)
    {

        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        var channelParameter = channel != null ?
            new ObjectParameter("Channel", channel) :
            new ObjectParameter("Channel", typeof(string));


        var categoryParameter = category != null ?
            new ObjectParameter("Category", category) :
            new ObjectParameter("Category", typeof(string));


        var file_SizeParameter = file_Size != null ?
            new ObjectParameter("File_Size", file_Size) :
            new ObjectParameter("File_Size", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var creationDateParameter = creationDate.HasValue ?
            new ObjectParameter("CreationDate", creationDate) :
            new ObjectParameter("CreationDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var trackingIDParameter = trackingID != null ?
            new ObjectParameter("TrackingID", trackingID) :
            new ObjectParameter("TrackingID", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreditDetail", aphidParameter, channelParameter, categoryParameter, file_SizeParameter, pathParameter, titleParameter, creationDateParameter, modifyDateParameter, trackingIDParameter, isActiveParameter);
    }


    public virtual ObjectResult<sp_CreditSumm_Result> sp_CreditSumm(Nullable<System.Guid> aphid)
    {

        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreditSumm_Result>("sp_CreditSumm", aphidParameter);
    }


    public virtual ObjectResult<sp_CrePostSummry_Result> sp_CrePostSummry(Nullable<System.Guid> aphid, string flag, string title)
    {

        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CrePostSummry_Result>("sp_CrePostSummry", aphidParameter, flagParameter, titleParameter);
    }


    public virtual ObjectResult<sp_EditBasicCloneModelNEW_Result> sp_EditBasicCloneModelNEW(string trackingNo)
    {

        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditBasicCloneModelNEW_Result>("sp_EditBasicCloneModelNEW", trackingNoParameter);
    }


    public virtual ObjectResult<sp_EditPremiumCloneModel_Result> sp_EditPremiumCloneModel(string trackingNo)
    {

        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditPremiumCloneModel_Result>("sp_EditPremiumCloneModel", trackingNoParameter);
    }


    public virtual int sp_ErrorLog(string controller, string action, string exception)
    {

        var controllerParameter = controller != null ?
            new ObjectParameter("Controller", controller) :
            new ObjectParameter("Controller", typeof(string));


        var actionParameter = action != null ?
            new ObjectParameter("Action", action) :
            new ObjectParameter("Action", typeof(string));


        var exceptionParameter = exception != null ?
            new ObjectParameter("Exception", exception) :
            new ObjectParameter("Exception", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ErrorLog", controllerParameter, actionParameter, exceptionParameter);
    }


    public virtual int sp_Favourites(Nullable<System.Guid> pUserID, string pFileName, string pTrackingNumber)
    {

        var pUserIDParameter = pUserID.HasValue ?
            new ObjectParameter("pUserID", pUserID) :
            new ObjectParameter("pUserID", typeof(System.Guid));


        var pFileNameParameter = pFileName != null ?
            new ObjectParameter("pFileName", pFileName) :
            new ObjectParameter("pFileName", typeof(string));


        var pTrackingNumberParameter = pTrackingNumber != null ?
            new ObjectParameter("pTrackingNumber", pTrackingNumber) :
            new ObjectParameter("pTrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Favourites", pUserIDParameter, pFileNameParameter, pTrackingNumberParameter);
    }


    public virtual ObjectResult<sp_forgetpassword_Result> sp_forgetpassword()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_forgetpassword_Result>("sp_forgetpassword");
    }


    public virtual int sp_ForgetPasswordChange(string token, string password)
    {

        var tokenParameter = token != null ?
            new ObjectParameter("token", token) :
            new ObjectParameter("token", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("password", password) :
            new ObjectParameter("password", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ForgetPasswordChange", tokenParameter, passwordParameter);
    }


    public virtual ObjectResult<sp_GetPostData_Result> sp_GetPostData(Nullable<System.Guid> username)
    {

        var usernameParameter = username.HasValue ?
            new ObjectParameter("username", username) :
            new ObjectParameter("username", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPostData_Result>("sp_GetPostData", usernameParameter);
    }


    public virtual ObjectResult<sp_GetReleaseData_Result> sp_GetReleaseData()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReleaseData_Result>("sp_GetReleaseData");
    }


    public virtual ObjectResult<sp_GetSocialNetwork_Result> sp_GetSocialNetwork(Nullable<System.Guid> aphid)
    {

        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSocialNetwork_Result>("sp_GetSocialNetwork", aphidParameter);
    }


    public virtual ObjectResult<sp_GetUserList_Result> sp_GetUserList()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserList_Result>("sp_GetUserList");
    }


    public virtual ObjectResult<sp_GetUserStatus_Result> sp_GetUserStatus(string user, string pass)
    {

        var userParameter = user != null ?
            new ObjectParameter("user", user) :
            new ObjectParameter("user", typeof(string));


        var passParameter = pass != null ?
            new ObjectParameter("pass", pass) :
            new ObjectParameter("pass", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserStatus_Result>("sp_GetUserStatus", userParameter, passParameter);
    }


    public virtual int sp_InsertAds(Nullable<System.Guid> adID, Nullable<System.Guid> userID, string companyLogo, string title, string adInformation, Nullable<System.DateTime> adCycleFromDate, Nullable<System.DateTime> adCycleToDate, Nullable<int> adTypeID, string adPicture, string adVideo, string adHyperLinkUrl, Nullable<decimal> priceToDisplay, Nullable<int> creditsID, Nullable<System.Guid> surveyID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete, Nullable<bool> isActive, string trackingNo)
    {

        var adIDParameter = adID.HasValue ?
            new ObjectParameter("AdID", adID) :
            new ObjectParameter("AdID", typeof(System.Guid));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var companyLogoParameter = companyLogo != null ?
            new ObjectParameter("CompanyLogo", companyLogo) :
            new ObjectParameter("CompanyLogo", typeof(string));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var adInformationParameter = adInformation != null ?
            new ObjectParameter("AdInformation", adInformation) :
            new ObjectParameter("AdInformation", typeof(string));


        var adCycleFromDateParameter = adCycleFromDate.HasValue ?
            new ObjectParameter("AdCycleFromDate", adCycleFromDate) :
            new ObjectParameter("AdCycleFromDate", typeof(System.DateTime));


        var adCycleToDateParameter = adCycleToDate.HasValue ?
            new ObjectParameter("AdCycleToDate", adCycleToDate) :
            new ObjectParameter("AdCycleToDate", typeof(System.DateTime));


        var adTypeIDParameter = adTypeID.HasValue ?
            new ObjectParameter("AdTypeID", adTypeID) :
            new ObjectParameter("AdTypeID", typeof(int));


        var adPictureParameter = adPicture != null ?
            new ObjectParameter("AdPicture", adPicture) :
            new ObjectParameter("AdPicture", typeof(string));


        var adVideoParameter = adVideo != null ?
            new ObjectParameter("AdVideo", adVideo) :
            new ObjectParameter("AdVideo", typeof(string));


        var adHyperLinkUrlParameter = adHyperLinkUrl != null ?
            new ObjectParameter("AdHyperLinkUrl", adHyperLinkUrl) :
            new ObjectParameter("AdHyperLinkUrl", typeof(string));


        var priceToDisplayParameter = priceToDisplay.HasValue ?
            new ObjectParameter("PriceToDisplay", priceToDisplay) :
            new ObjectParameter("PriceToDisplay", typeof(decimal));


        var creditsIDParameter = creditsID.HasValue ?
            new ObjectParameter("CreditsID", creditsID) :
            new ObjectParameter("CreditsID", typeof(int));


        var surveyIDParameter = surveyID.HasValue ?
            new ObjectParameter("SurveyID", surveyID) :
            new ObjectParameter("SurveyID", typeof(System.Guid));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isDeleteParameter = isDelete.HasValue ?
            new ObjectParameter("IsDelete", isDelete) :
            new ObjectParameter("IsDelete", typeof(bool));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAds", adIDParameter, userIDParameter, companyLogoParameter, titleParameter, adInformationParameter, adCycleFromDateParameter, adCycleToDateParameter, adTypeIDParameter, adPictureParameter, adVideoParameter, adHyperLinkUrlParameter, priceToDisplayParameter, creditsIDParameter, surveyIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter, isActiveParameter, trackingNoParameter);
    }


    public virtual int sp_InsertBankAccountDetails(Nullable<System.Guid> bankAccountID, Nullable<long> cradNumber, Nullable<short> expiryMonth, Nullable<int> expiryYear, string cSV, string nameOnCard)
    {

        var bankAccountIDParameter = bankAccountID.HasValue ?
            new ObjectParameter("BankAccountID", bankAccountID) :
            new ObjectParameter("BankAccountID", typeof(System.Guid));


        var cradNumberParameter = cradNumber.HasValue ?
            new ObjectParameter("CradNumber", cradNumber) :
            new ObjectParameter("CradNumber", typeof(long));


        var expiryMonthParameter = expiryMonth.HasValue ?
            new ObjectParameter("ExpiryMonth", expiryMonth) :
            new ObjectParameter("ExpiryMonth", typeof(short));


        var expiryYearParameter = expiryYear.HasValue ?
            new ObjectParameter("ExpiryYear", expiryYear) :
            new ObjectParameter("ExpiryYear", typeof(int));


        var cSVParameter = cSV != null ?
            new ObjectParameter("CSV", cSV) :
            new ObjectParameter("CSV", typeof(string));


        var nameOnCardParameter = nameOnCard != null ?
            new ObjectParameter("NameOnCard", nameOnCard) :
            new ObjectParameter("NameOnCard", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBankAccountDetails", bankAccountIDParameter, cradNumberParameter, expiryMonthParameter, expiryYearParameter, cSVParameter, nameOnCardParameter);
    }


    public virtual int sp_InsertBasicInterruptedAudio(Nullable<System.Guid> cloneID, string songName, byte[] interruptedByte, string type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive)
    {

        var cloneIDParameter = cloneID.HasValue ?
            new ObjectParameter("CloneID", cloneID) :
            new ObjectParameter("CloneID", typeof(System.Guid));


        var songNameParameter = songName != null ?
            new ObjectParameter("SongName", songName) :
            new ObjectParameter("SongName", typeof(string));


        var interruptedByteParameter = interruptedByte != null ?
            new ObjectParameter("InterruptedByte", interruptedByte) :
            new ObjectParameter("InterruptedByte", typeof(byte[]));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBasicInterruptedAudio", cloneIDParameter, songNameParameter, interruptedByteParameter, typeParameter, createdDateParameter, modifiedDateParameter, isActiveParameter);
    }


    public virtual int sp_InsertByterAccount(Nullable<System.Guid> byterUserID, string userName, string password, string firstName, string lastName, string emailAddress, string dOB, string phone, string recoveryEmail, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
    {

        var byterUserIDParameter = byterUserID.HasValue ?
            new ObjectParameter("ByterUserID", byterUserID) :
            new ObjectParameter("ByterUserID", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var recoveryEmailParameter = recoveryEmail != null ?
            new ObjectParameter("RecoveryEmail", recoveryEmail) :
            new ObjectParameter("RecoveryEmail", typeof(string));


        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isDeleteParameter = isDelete.HasValue ?
            new ObjectParameter("IsDelete", isDelete) :
            new ObjectParameter("IsDelete", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertByterAccount", byterUserIDParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, recoveryEmailParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
    }

        public virtual int sp_InserttblUserSubscribe(Nullable<System.Guid> SubscribeUserId, Nullable<System.Guid> UserId)
        {

            var subscribeUserIDParameter = SubscribeUserId.HasValue ?
                new ObjectParameter("SubscribeUserId", SubscribeUserId) :
                new ObjectParameter("SubscribeUserId", typeof(System.Guid));

            var userIDParameter = UserId.HasValue ?
              new ObjectParameter("UserId", UserId) :
              new ObjectParameter("UserId", typeof(System.Guid));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InserttblUserSubscribe", subscribeUserIDParameter, userIDParameter);
        }

        public virtual int sp_InsertDataPlan(Nullable<System.Guid> userID, string storagePlan, string usedSpace, string freeSpace, Nullable<int> accountTypeId, Nullable<System.DateTime> expireDate)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var storagePlanParameter = storagePlan != null ?
            new ObjectParameter("StoragePlan", storagePlan) :
            new ObjectParameter("StoragePlan", typeof(string));


        var usedSpaceParameter = usedSpace != null ?
            new ObjectParameter("UsedSpace", usedSpace) :
            new ObjectParameter("UsedSpace", typeof(string));


        var freeSpaceParameter = freeSpace != null ?
            new ObjectParameter("FreeSpace", freeSpace) :
            new ObjectParameter("FreeSpace", typeof(string));


        var accountTypeIdParameter = accountTypeId.HasValue ?
            new ObjectParameter("AccountTypeId", accountTypeId) :
            new ObjectParameter("AccountTypeId", typeof(int));


        var expireDateParameter = expireDate.HasValue ?
            new ObjectParameter("ExpireDate", expireDate) :
            new ObjectParameter("ExpireDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDataPlan", userIDParameter, storagePlanParameter, usedSpaceParameter, freeSpaceParameter, accountTypeIdParameter, expireDateParameter);
    }


    public virtual int sp_InsertForgetPasswordDetail(string userName, string emailId, Nullable<System.Guid> token, Nullable<bool> status)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var emailIdParameter = emailId != null ?
            new ObjectParameter("EmailId", emailId) :
            new ObjectParameter("EmailId", typeof(string));


        var tokenParameter = token.HasValue ?
            new ObjectParameter("Token", token) :
            new ObjectParameter("Token", typeof(System.Guid));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertForgetPasswordDetail", userNameParameter, emailIdParameter, tokenParameter, statusParameter);
    }


    public virtual int sp_InsertMasterAccountType(string accountTypeName)
    {

        var accountTypeNameParameter = accountTypeName != null ?
            new ObjectParameter("AccountTypeName", accountTypeName) :
            new ObjectParameter("AccountTypeName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterAccountType", accountTypeNameParameter);
    }


    public virtual int sp_InsertMasterAdsType(string adTypeName, Nullable<short> adFeature)
    {

        var adTypeNameParameter = adTypeName != null ?
            new ObjectParameter("AdTypeName", adTypeName) :
            new ObjectParameter("AdTypeName", typeof(string));


        var adFeatureParameter = adFeature.HasValue ?
            new ObjectParameter("AdFeature", adFeature) :
            new ObjectParameter("AdFeature", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterAdsType", adTypeNameParameter, adFeatureParameter);
    }


    public virtual int sp_InsertMasterCredits(string creditsPoint)
    {

        var creditsPointParameter = creditsPoint != null ?
            new ObjectParameter("CreditsPoint", creditsPoint) :
            new ObjectParameter("CreditsPoint", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterCredits", creditsPointParameter);
    }


    public virtual int sp_insertMTUserSubs(string composerName, Nullable<System.Guid> channelId, Nullable<int> credits, string category, Nullable<System.Guid> userId, string title, string path, Nullable<bool> linkToPostM, string premiumProfilePic, string trackingNumber, Nullable<bool> messageStatus, Nullable<System.Guid> byterUsrId, string byterUserName)
    {

        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var channelIdParameter = channelId.HasValue ?
            new ObjectParameter("ChannelId", channelId) :
            new ObjectParameter("ChannelId", typeof(System.Guid));


        var creditsParameter = credits.HasValue ?
            new ObjectParameter("Credits", credits) :
            new ObjectParameter("Credits", typeof(int));


        var categoryParameter = category != null ?
            new ObjectParameter("Category", category) :
            new ObjectParameter("Category", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var linkToPostMParameter = linkToPostM.HasValue ?
            new ObjectParameter("LinkToPostM", linkToPostM) :
            new ObjectParameter("LinkToPostM", typeof(bool));


        var premiumProfilePicParameter = premiumProfilePic != null ?
            new ObjectParameter("PremiumProfilePic", premiumProfilePic) :
            new ObjectParameter("PremiumProfilePic", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var messageStatusParameter = messageStatus.HasValue ?
            new ObjectParameter("MessageStatus", messageStatus) :
            new ObjectParameter("MessageStatus", typeof(bool));


        var byterUsrIdParameter = byterUsrId.HasValue ?
            new ObjectParameter("ByterUsrId", byterUsrId) :
            new ObjectParameter("ByterUsrId", typeof(System.Guid));


        var byterUserNameParameter = byterUserName != null ?
            new ObjectParameter("ByterUserName", byterUserName) :
            new ObjectParameter("ByterUserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertMTUserSubs", composerNameParameter, channelIdParameter, creditsParameter, categoryParameter, userIdParameter, titleParameter, pathParameter, linkToPostMParameter, premiumProfilePicParameter, trackingNumberParameter, messageStatusParameter, byterUsrIdParameter, byterUserNameParameter);
    }


    public virtual int sp_InsertPersonAddress(Nullable<System.Guid> addressID, string addressLine1, string addressLine2, string city, string region, string postalCode)
    {

        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var addressLine1Parameter = addressLine1 != null ?
            new ObjectParameter("AddressLine1", addressLine1) :
            new ObjectParameter("AddressLine1", typeof(string));


        var addressLine2Parameter = addressLine2 != null ?
            new ObjectParameter("AddressLine2", addressLine2) :
            new ObjectParameter("AddressLine2", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var regionParameter = region != null ?
            new ObjectParameter("Region", region) :
            new ObjectParameter("Region", typeof(string));


        var postalCodeParameter = postalCode != null ?
            new ObjectParameter("PostalCode", postalCode) :
            new ObjectParameter("PostalCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPersonAddress", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, regionParameter, postalCodeParameter);
    }


    public virtual int sp_InsertSecurityQuestions(Nullable<System.Guid> securityQuestionID, string securityQuestion1, string answer1, string securityQuestion2, string answer2)
    {

        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var securityQuestion1Parameter = securityQuestion1 != null ?
            new ObjectParameter("SecurityQuestion1", securityQuestion1) :
            new ObjectParameter("SecurityQuestion1", typeof(string));


        var answer1Parameter = answer1 != null ?
            new ObjectParameter("Answer1", answer1) :
            new ObjectParameter("Answer1", typeof(string));


        var securityQuestion2Parameter = securityQuestion2 != null ?
            new ObjectParameter("SecurityQuestion2", securityQuestion2) :
            new ObjectParameter("SecurityQuestion2", typeof(string));


        var answer2Parameter = answer2 != null ?
            new ObjectParameter("Answer2", answer2) :
            new ObjectParameter("Answer2", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSecurityQuestions", securityQuestionIDParameter, securityQuestion1Parameter, answer1Parameter, securityQuestion2Parameter, answer2Parameter);
    }


    public virtual int sp_InsertSurveyQuestion(Nullable<System.Guid> surveyID, string question, string option1, string option2, string option3, string option4, string option5, string option6, string option7, string option8)
    {

        var surveyIDParameter = surveyID.HasValue ?
            new ObjectParameter("SurveyID", surveyID) :
            new ObjectParameter("SurveyID", typeof(System.Guid));


        var questionParameter = question != null ?
            new ObjectParameter("Question", question) :
            new ObjectParameter("Question", typeof(string));


        var option1Parameter = option1 != null ?
            new ObjectParameter("Option1", option1) :
            new ObjectParameter("Option1", typeof(string));


        var option2Parameter = option2 != null ?
            new ObjectParameter("Option2", option2) :
            new ObjectParameter("Option2", typeof(string));


        var option3Parameter = option3 != null ?
            new ObjectParameter("Option3", option3) :
            new ObjectParameter("Option3", typeof(string));


        var option4Parameter = option4 != null ?
            new ObjectParameter("Option4", option4) :
            new ObjectParameter("Option4", typeof(string));


        var option5Parameter = option5 != null ?
            new ObjectParameter("Option5", option5) :
            new ObjectParameter("Option5", typeof(string));


        var option6Parameter = option6 != null ?
            new ObjectParameter("Option6", option6) :
            new ObjectParameter("Option6", typeof(string));


        var option7Parameter = option7 != null ?
            new ObjectParameter("Option7", option7) :
            new ObjectParameter("Option7", typeof(string));


        var option8Parameter = option8 != null ?
            new ObjectParameter("Option8", option8) :
            new ObjectParameter("Option8", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSurveyQuestion", surveyIDParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, option5Parameter, option6Parameter, option7Parameter, option8Parameter);
    }


    public virtual int sp_InsertUpdateAudioInteruptionFile(Nullable<System.Guid> userId, string audioInterruptionFileName, string fileName, Nullable<bool> isActive, ObjectParameter id, Nullable<int> flag, string imagename)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var audioInterruptionFileNameParameter = audioInterruptionFileName != null ?
            new ObjectParameter("AudioInterruptionFileName", audioInterruptionFileName) :
            new ObjectParameter("AudioInterruptionFileName", typeof(string));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(int));


        var imagenameParameter = imagename != null ?
            new ObjectParameter("imagename", imagename) :
            new ObjectParameter("imagename", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateAudioInteruptionFile", userIdParameter, audioInterruptionFileNameParameter, fileNameParameter, isActiveParameter, id, flagParameter, imagenameParameter);
    }


    public virtual int sp_InsertUpdateImageInteruptionFile(Nullable<System.Guid> userId, string imageInterruption, string watermarkImageName, Nullable<bool> isActive, ObjectParameter id, Nullable<int> flag, string imagename)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var imageInterruptionParameter = imageInterruption != null ?
            new ObjectParameter("ImageInterruption", imageInterruption) :
            new ObjectParameter("ImageInterruption", typeof(string));


        var watermarkImageNameParameter = watermarkImageName != null ?
            new ObjectParameter("WatermarkImageName", watermarkImageName) :
            new ObjectParameter("WatermarkImageName", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(int));


        var imagenameParameter = imagename != null ?
            new ObjectParameter("imagename", imagename) :
            new ObjectParameter("imagename", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateImageInteruptionFile", userIdParameter, imageInterruptionParameter, watermarkImageNameParameter, isActiveParameter, id, flagParameter, imagenameParameter);
    }


    public virtual int sp_InsertUpdateImageInteruptionFileNew1(Nullable<System.Guid> userId, string imageInterruption, string watermarkImageName, Nullable<bool> isActive, string flag)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var imageInterruptionParameter = imageInterruption != null ?
            new ObjectParameter("ImageInterruption", imageInterruption) :
            new ObjectParameter("ImageInterruption", typeof(string));


        var watermarkImageNameParameter = watermarkImageName != null ?
            new ObjectParameter("WatermarkImageName", watermarkImageName) :
            new ObjectParameter("WatermarkImageName", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateImageInteruptionFileNew1", userIdParameter, imageInterruptionParameter, watermarkImageNameParameter, isActiveParameter, flagParameter);
    }


    public virtual int sp_InsertUpdateVideoInteruptionFile(Nullable<System.Guid> userId, byte[] videoFile)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var videoFileParameter = videoFile != null ?
            new ObjectParameter("VideoFile", videoFile) :
            new ObjectParameter("VideoFile", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateVideoInteruptionFile", userIdParameter, videoFileParameter);
    }


    public virtual int sp_InsertUrlLinks(Nullable<System.Guid> userId, string urlSites, Nullable<System.DateTime> date, Nullable<bool> status, Nullable<System.DateTime> modifiedDate)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var urlSitesParameter = urlSites != null ?
            new ObjectParameter("UrlSites", urlSites) :
            new ObjectParameter("UrlSites", typeof(string));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUrlLinks", userIdParameter, urlSitesParameter, dateParameter, statusParameter, modifiedDateParameter);
    }


    public virtual int sp_InsertUsers(Nullable<System.Guid> userId, string userName, string userPassword, Nullable<bool> userStatus, Nullable<int> accountTypeID, string picturePath, Nullable<int> pictureServerId, string emailAddress, string stripeCustomerId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        var userStatusParameter = userStatus.HasValue ?
            new ObjectParameter("UserStatus", userStatus) :
            new ObjectParameter("UserStatus", typeof(bool));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var picturePathParameter = picturePath != null ?
            new ObjectParameter("PicturePath", picturePath) :
            new ObjectParameter("PicturePath", typeof(string));


        var pictureServerIdParameter = pictureServerId.HasValue ?
            new ObjectParameter("PictureServerId", pictureServerId) :
            new ObjectParameter("PictureServerId", typeof(int));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var stripeCustomerIdParameter = stripeCustomerId != null ?
            new ObjectParameter("StripeCustomerId", stripeCustomerId) :
            new ObjectParameter("StripeCustomerId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUsers", userIdParameter, userNameParameter, userPasswordParameter, userStatusParameter, accountTypeIDParameter, picturePathParameter, pictureServerIdParameter, emailAddressParameter, stripeCustomerIdParameter);
    }


    public virtual int sp_InserUserSpon(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string title, string tag, string artistName, string albumTitle, string audioFilePath, string uploadFilePath, string matrixFilePath, string composerName, string producer, string publisher, string selectedInteruptionFile, string interuptionStyle, string availableForDownload, string explicitContent, string uploadImageFilePath, string uploadPDFFilePath, string pagePercentage, string type, string pdfFilePath, string fileNames, string videoFilePath, string waterMarkMatrixImagePath, string waterMarkMatrixImageText, string videoCategory, string rARFilePath, string matrixImagePath, string creatotName, string trackingNumber, Nullable<int> catID, Nullable<int> genCloneID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isActive, string fileSize)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIdParameter = cloneId.HasValue ?
            new ObjectParameter("CloneId", cloneId) :
            new ObjectParameter("CloneId", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagParameter = tag != null ?
            new ObjectParameter("Tag", tag) :
            new ObjectParameter("Tag", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var uploadFilePathParameter = uploadFilePath != null ?
            new ObjectParameter("UploadFilePath", uploadFilePath) :
            new ObjectParameter("UploadFilePath", typeof(string));


        var matrixFilePathParameter = matrixFilePath != null ?
            new ObjectParameter("MatrixFilePath", matrixFilePath) :
            new ObjectParameter("MatrixFilePath", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInteruptionFileParameter = selectedInteruptionFile != null ?
            new ObjectParameter("SelectedInteruptionFile", selectedInteruptionFile) :
            new ObjectParameter("SelectedInteruptionFile", typeof(string));


        var interuptionStyleParameter = interuptionStyle != null ?
            new ObjectParameter("InteruptionStyle", interuptionStyle) :
            new ObjectParameter("InteruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var uploadImageFilePathParameter = uploadImageFilePath != null ?
            new ObjectParameter("UploadImageFilePath", uploadImageFilePath) :
            new ObjectParameter("UploadImageFilePath", typeof(string));


        var uploadPDFFilePathParameter = uploadPDFFilePath != null ?
            new ObjectParameter("UploadPDFFilePath", uploadPDFFilePath) :
            new ObjectParameter("UploadPDFFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pdfFilePathParameter = pdfFilePath != null ?
            new ObjectParameter("PdfFilePath", pdfFilePath) :
            new ObjectParameter("PdfFilePath", typeof(string));


        var fileNamesParameter = fileNames != null ?
            new ObjectParameter("FileNames", fileNames) :
            new ObjectParameter("FileNames", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var waterMarkMatrixImagePathParameter = waterMarkMatrixImagePath != null ?
            new ObjectParameter("WaterMarkMatrixImagePath", waterMarkMatrixImagePath) :
            new ObjectParameter("WaterMarkMatrixImagePath", typeof(string));


        var waterMarkMatrixImageTextParameter = waterMarkMatrixImageText != null ?
            new ObjectParameter("WaterMarkMatrixImageText", waterMarkMatrixImageText) :
            new ObjectParameter("WaterMarkMatrixImageText", typeof(string));


        var videoCategoryParameter = videoCategory != null ?
            new ObjectParameter("VideoCategory", videoCategory) :
            new ObjectParameter("VideoCategory", typeof(string));


        var rARFilePathParameter = rARFilePath != null ?
            new ObjectParameter("RARFilePath", rARFilePath) :
            new ObjectParameter("RARFilePath", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatotNameParameter = creatotName != null ?
            new ObjectParameter("CreatotName", creatotName) :
            new ObjectParameter("CreatotName", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        var genCloneIDParameter = genCloneID.HasValue ?
            new ObjectParameter("GenCloneID", genCloneID) :
            new ObjectParameter("GenCloneID", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var fileSizeParameter = fileSize != null ?
            new ObjectParameter("FileSize", fileSize) :
            new ObjectParameter("FileSize", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InserUserSpon", userIDParameter, cloneIdParameter, titleParameter, tagParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, uploadFilePathParameter, matrixFilePathParameter, composerNameParameter, producerParameter, publisherParameter, selectedInteruptionFileParameter, interuptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadImageFilePathParameter, uploadPDFFilePathParameter, pagePercentageParameter, typeParameter, pdfFilePathParameter, fileNamesParameter, videoFilePathParameter, waterMarkMatrixImagePathParameter, waterMarkMatrixImageTextParameter, videoCategoryParameter, rARFilePathParameter, matrixImagePathParameter, creatotNameParameter, trackingNumberParameter, catIDParameter, genCloneIDParameter, createdDateParameter, modifyDateParameter, isActiveParameter, fileSizeParameter);
    }


    public virtual int sp_InsUpdDelSocialNetwork_tbl(Nullable<System.Guid> iD, string categoryName, string accessToken, Nullable<System.DateTime> expires, Nullable<System.Guid> aphid, string insUpdDele, string refreshToken, Nullable<bool> isDeleted)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(System.Guid));


        var categoryNameParameter = categoryName != null ?
            new ObjectParameter("CategoryName", categoryName) :
            new ObjectParameter("CategoryName", typeof(string));


        var accessTokenParameter = accessToken != null ?
            new ObjectParameter("AccessToken", accessToken) :
            new ObjectParameter("AccessToken", typeof(string));


        var expiresParameter = expires.HasValue ?
            new ObjectParameter("Expires", expires) :
            new ObjectParameter("Expires", typeof(System.DateTime));


        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        var insUpdDeleParameter = insUpdDele != null ?
            new ObjectParameter("InsUpdDele", insUpdDele) :
            new ObjectParameter("InsUpdDele", typeof(string));


        var refreshTokenParameter = refreshToken != null ?
            new ObjectParameter("RefreshToken", refreshToken) :
            new ObjectParameter("RefreshToken", typeof(string));


        var isDeletedParameter = isDeleted.HasValue ?
            new ObjectParameter("IsDeleted", isDeleted) :
            new ObjectParameter("IsDeleted", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsUpdDelSocialNetwork_tbl", iDParameter, categoryNameParameter, accessTokenParameter, expiresParameter, aphidParameter, insUpdDeleParameter, refreshTokenParameter, isDeletedParameter);
    }


    public virtual int sp_InterruptedFiles(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string interruptFilePath, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive, string fileName, string videoPath, string trackingNumber, Nullable<int> catID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIdParameter = cloneId.HasValue ?
            new ObjectParameter("CloneId", cloneId) :
            new ObjectParameter("CloneId", typeof(System.Guid));


        var interruptFilePathParameter = interruptFilePath != null ?
            new ObjectParameter("InterruptFilePath", interruptFilePath) :
            new ObjectParameter("InterruptFilePath", typeof(string));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var videoPathParameter = videoPath != null ?
            new ObjectParameter("VideoPath", videoPath) :
            new ObjectParameter("VideoPath", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InterruptedFiles", userIDParameter, cloneIdParameter, interruptFilePathParameter, createdDateParameter, modifiedDateParameter, isActiveParameter, fileNameParameter, videoPathParameter, trackingNumberParameter, catIDParameter);
    }


    public virtual int sp_PostDetails(Nullable<int> id, Nullable<System.Guid> aphid, string post, Nullable<long> memory, string pOSTInsUpdDele)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        var postParameter = post != null ?
            new ObjectParameter("Post", post) :
            new ObjectParameter("Post", typeof(string));


        var memoryParameter = memory.HasValue ?
            new ObjectParameter("Memory", memory) :
            new ObjectParameter("Memory", typeof(long));


        var pOSTInsUpdDeleParameter = pOSTInsUpdDele != null ?
            new ObjectParameter("POSTInsUpdDele", pOSTInsUpdDele) :
            new ObjectParameter("POSTInsUpdDele", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PostDetails", idParameter, aphidParameter, postParameter, memoryParameter, pOSTInsUpdDeleParameter);
    }


    public virtual ObjectResult<sp_PostingDataMaterial_Result> sp_PostingDataMaterial(string trackno)
    {

        var tracknoParameter = trackno != null ?
            new ObjectParameter("Trackno", trackno) :
            new ObjectParameter("Trackno", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PostingDataMaterial_Result>("sp_PostingDataMaterial", tracknoParameter);
    }


    public virtual int sp_PremiumGenerateClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string audioFilePath, string imageFile, string composerName, string producer, string publisher, string selectedInterruptionFile, string interruptionStyle, string availableForDownload, string explicitContent, string type, string pDFFilePath, string videoFilePath, string pagePercentage, string rARFilePAth, string matrixImagePath, string creatorName, string trackingNumber, string totalLength, Nullable<int> catID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIDParameter = cloneID.HasValue ?
            new ObjectParameter("CloneID", cloneID) :
            new ObjectParameter("CloneID", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagsParameter = tags != null ?
            new ObjectParameter("Tags", tags) :
            new ObjectParameter("Tags", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var imageFileParameter = imageFile != null ?
            new ObjectParameter("ImageFile", imageFile) :
            new ObjectParameter("ImageFile", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInterruptionFileParameter = selectedInterruptionFile != null ?
            new ObjectParameter("SelectedInterruptionFile", selectedInterruptionFile) :
            new ObjectParameter("SelectedInterruptionFile", typeof(string));


        var interruptionStyleParameter = interruptionStyle != null ?
            new ObjectParameter("InterruptionStyle", interruptionStyle) :
            new ObjectParameter("InterruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pDFFilePathParameter = pDFFilePath != null ?
            new ObjectParameter("PDFFilePath", pDFFilePath) :
            new ObjectParameter("PDFFilePath", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var rARFilePAthParameter = rARFilePAth != null ?
            new ObjectParameter("RARFilePAth", rARFilePAth) :
            new ObjectParameter("RARFilePAth", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatorNameParameter = creatorName != null ?
            new ObjectParameter("CreatorName", creatorName) :
            new ObjectParameter("CreatorName", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var totalLengthParameter = totalLength != null ?
            new ObjectParameter("TotalLength", totalLength) :
            new ObjectParameter("TotalLength", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PremiumGenerateClone", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, imageFileParameter, composerNameParameter, producerParameter, publisherParameter, selectedInterruptionFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, typeParameter, pDFFilePathParameter, videoFilePathParameter, pagePercentageParameter, rARFilePAthParameter, matrixImagePathParameter, creatorNameParameter, trackingNumberParameter, totalLengthParameter, catIDParameter);
    }


    public virtual int sp_Release(Nullable<int> releaseId, string message, string imagePath)
    {

        var releaseIdParameter = releaseId.HasValue ?
            new ObjectParameter("ReleaseId", releaseId) :
            new ObjectParameter("ReleaseId", typeof(int));


        var messageParameter = message != null ?
            new ObjectParameter("Message", message) :
            new ObjectParameter("Message", typeof(string));


        var imagePathParameter = imagePath != null ?
            new ObjectParameter("ImagePath", imagePath) :
            new ObjectParameter("ImagePath", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Release", releaseIdParameter, messageParameter, imagePathParameter);
    }


    public virtual ObjectResult<sp_SearchAllGenerateClones_Result> sp_SearchAllGenerateClones(string pCatType, string pTitleName, string pTrackingNumber)
    {

        var pCatTypeParameter = pCatType != null ?
            new ObjectParameter("pCatType", pCatType) :
            new ObjectParameter("pCatType", typeof(string));


        var pTitleNameParameter = pTitleName != null ?
            new ObjectParameter("pTitleName", pTitleName) :
            new ObjectParameter("pTitleName", typeof(string));


        var pTrackingNumberParameter = pTrackingNumber != null ?
            new ObjectParameter("pTrackingNumber", pTrackingNumber) :
            new ObjectParameter("pTrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchAllGenerateClones_Result>("sp_SearchAllGenerateClones", pCatTypeParameter, pTitleNameParameter, pTrackingNumberParameter);
    }


    public virtual int sp_SearchCatTypeRecords(string pCatType, string pFileName, string pTrackingNumber)
    {

        var pCatTypeParameter = pCatType != null ?
            new ObjectParameter("pCatType", pCatType) :
            new ObjectParameter("pCatType", typeof(string));


        var pFileNameParameter = pFileName != null ?
            new ObjectParameter("pFileName", pFileName) :
            new ObjectParameter("pFileName", typeof(string));


        var pTrackingNumberParameter = pTrackingNumber != null ?
            new ObjectParameter("pTrackingNumber", pTrackingNumber) :
            new ObjectParameter("pTrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SearchCatTypeRecords", pCatTypeParameter, pFileNameParameter, pTrackingNumberParameter);
    }


    public virtual ObjectResult<sp_SearchCatTypeRecords1_Result> sp_SearchCatTypeRecords1(string pCatType, string pTitleName, string pTrackingNumber)
    {

        var pCatTypeParameter = pCatType != null ?
            new ObjectParameter("pCatType", pCatType) :
            new ObjectParameter("pCatType", typeof(string));


        var pTitleNameParameter = pTitleName != null ?
            new ObjectParameter("pTitleName", pTitleName) :
            new ObjectParameter("pTitleName", typeof(string));


        var pTrackingNumberParameter = pTrackingNumber != null ?
            new ObjectParameter("pTrackingNumber", pTrackingNumber) :
            new ObjectParameter("pTrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchCatTypeRecords1_Result>("sp_SearchCatTypeRecords1", pCatTypeParameter, pTitleNameParameter, pTrackingNumberParameter);
    }


    public virtual ObjectResult<sp_SearchCreateLinkPost_Result> sp_SearchCreateLinkPost(Nullable<System.Guid> userId, string title, string category)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("userId", userId) :
            new ObjectParameter("userId", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("title", title) :
            new ObjectParameter("title", typeof(string));


        var categoryParameter = category != null ?
            new ObjectParameter("category", category) :
            new ObjectParameter("category", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchCreateLinkPost_Result>("sp_SearchCreateLinkPost", userIdParameter, titleParameter, categoryParameter);
    }


    public virtual int sp_SocialNetworkLogin(string username, string password, Nullable<System.Guid> aphid, string categoryname, string status, Nullable<bool> isActive)
    {

        var usernameParameter = username != null ?
            new ObjectParameter("Username", username) :
            new ObjectParameter("Username", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var aphidParameter = aphid.HasValue ?
            new ObjectParameter("Aphid", aphid) :
            new ObjectParameter("Aphid", typeof(System.Guid));


        var categorynameParameter = categoryname != null ?
            new ObjectParameter("Categoryname", categoryname) :
            new ObjectParameter("Categoryname", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SocialNetworkLogin", usernameParameter, passwordParameter, aphidParameter, categorynameParameter, statusParameter, isActiveParameter);
    }


    public virtual ObjectResult<sp_Sorting_Result> sp_Sorting(string category, Nullable<System.Guid> userId, string flag)
    {

        var categoryParameter = category != null ?
            new ObjectParameter("Category", category) :
            new ObjectParameter("Category", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sorting_Result>("sp_Sorting", categoryParameter, userIdParameter, flagParameter);
    }


    public virtual int sp_tblAdmin(Nullable<int> iD, Nullable<System.Guid> adminID, string password, string adminName, Nullable<bool> isFree, Nullable<System.Guid> groupId, string recordType)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));


        var adminIDParameter = adminID.HasValue ?
            new ObjectParameter("AdminID", adminID) :
            new ObjectParameter("AdminID", typeof(System.Guid));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var adminNameParameter = adminName != null ?
            new ObjectParameter("AdminName", adminName) :
            new ObjectParameter("AdminName", typeof(string));


        var isFreeParameter = isFree.HasValue ?
            new ObjectParameter("IsFree", isFree) :
            new ObjectParameter("IsFree", typeof(bool));


        var groupIdParameter = groupId.HasValue ?
            new ObjectParameter("GroupId", groupId) :
            new ObjectParameter("GroupId", typeof(System.Guid));


        var recordTypeParameter = recordType != null ?
            new ObjectParameter("RecordType", recordType) :
            new ObjectParameter("RecordType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_tblAdmin", iDParameter, adminIDParameter, passwordParameter, adminNameParameter, isFreeParameter, groupIdParameter, recordTypeParameter);
    }


    public virtual ObjectResult<sp_ToolsInfo_Result> sp_ToolsInfo(string toolName, string images, Nullable<int> flag, Nullable<int> toolID, Nullable<System.Guid> userID, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modify, string fileName, string toolcontent, string toolInfo, Nullable<int> isActive)
    {

        var toolNameParameter = toolName != null ?
            new ObjectParameter("ToolName", toolName) :
            new ObjectParameter("ToolName", typeof(string));


        var imagesParameter = images != null ?
            new ObjectParameter("Images", images) :
            new ObjectParameter("Images", typeof(string));


        var flagParameter = flag.HasValue ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(int));


        var toolIDParameter = toolID.HasValue ?
            new ObjectParameter("ToolID", toolID) :
            new ObjectParameter("ToolID", typeof(int));


        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var createdOnParameter = createdOn.HasValue ?
            new ObjectParameter("CreatedOn", createdOn) :
            new ObjectParameter("CreatedOn", typeof(System.DateTime));


        var modifyParameter = modify.HasValue ?
            new ObjectParameter("Modify", modify) :
            new ObjectParameter("Modify", typeof(System.DateTime));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var toolcontentParameter = toolcontent != null ?
            new ObjectParameter("Toolcontent", toolcontent) :
            new ObjectParameter("Toolcontent", typeof(string));


        var toolInfoParameter = toolInfo != null ?
            new ObjectParameter("ToolInfo", toolInfo) :
            new ObjectParameter("ToolInfo", typeof(string));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ToolsInfo_Result>("sp_ToolsInfo", toolNameParameter, imagesParameter, flagParameter, toolIDParameter, userIDParameter, createdOnParameter, modifyParameter, fileNameParameter, toolcontentParameter, toolInfoParameter, isActiveParameter);
    }


    public virtual int sp_UpdateAllGenerateClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string title, string tag, string artistName, string albumTitle, string audioFilePath, string uploadFilePath, string matrixFilePath, string composerName, string producer, string publisher, string selectedInteruptionFile, string interuptionStyle, string availableForDownload, string explicitContent, string uploadImageFilePath, string uploadPDFFilePath, string pagePercentage, string type, string pdfFilePath, string fileNames, string videoFilePath, string waterMarkMatrixImagePath, string waterMarkMatrixImageText, string videoCategory, string rARFilePath, string matrixImagePath, string creatotName, Nullable<int> catID, Nullable<int> genCloneID, Nullable<System.DateTime> modifyDate, Nullable<bool> isActive, string trackingNumber)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIdParameter = cloneId.HasValue ?
            new ObjectParameter("CloneId", cloneId) :
            new ObjectParameter("CloneId", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagParameter = tag != null ?
            new ObjectParameter("Tag", tag) :
            new ObjectParameter("Tag", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var uploadFilePathParameter = uploadFilePath != null ?
            new ObjectParameter("UploadFilePath", uploadFilePath) :
            new ObjectParameter("UploadFilePath", typeof(string));


        var matrixFilePathParameter = matrixFilePath != null ?
            new ObjectParameter("MatrixFilePath", matrixFilePath) :
            new ObjectParameter("MatrixFilePath", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInteruptionFileParameter = selectedInteruptionFile != null ?
            new ObjectParameter("SelectedInteruptionFile", selectedInteruptionFile) :
            new ObjectParameter("SelectedInteruptionFile", typeof(string));


        var interuptionStyleParameter = interuptionStyle != null ?
            new ObjectParameter("InteruptionStyle", interuptionStyle) :
            new ObjectParameter("InteruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var uploadImageFilePathParameter = uploadImageFilePath != null ?
            new ObjectParameter("UploadImageFilePath", uploadImageFilePath) :
            new ObjectParameter("UploadImageFilePath", typeof(string));


        var uploadPDFFilePathParameter = uploadPDFFilePath != null ?
            new ObjectParameter("UploadPDFFilePath", uploadPDFFilePath) :
            new ObjectParameter("UploadPDFFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pdfFilePathParameter = pdfFilePath != null ?
            new ObjectParameter("PdfFilePath", pdfFilePath) :
            new ObjectParameter("PdfFilePath", typeof(string));


        var fileNamesParameter = fileNames != null ?
            new ObjectParameter("FileNames", fileNames) :
            new ObjectParameter("FileNames", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var waterMarkMatrixImagePathParameter = waterMarkMatrixImagePath != null ?
            new ObjectParameter("WaterMarkMatrixImagePath", waterMarkMatrixImagePath) :
            new ObjectParameter("WaterMarkMatrixImagePath", typeof(string));


        var waterMarkMatrixImageTextParameter = waterMarkMatrixImageText != null ?
            new ObjectParameter("WaterMarkMatrixImageText", waterMarkMatrixImageText) :
            new ObjectParameter("WaterMarkMatrixImageText", typeof(string));


        var videoCategoryParameter = videoCategory != null ?
            new ObjectParameter("VideoCategory", videoCategory) :
            new ObjectParameter("VideoCategory", typeof(string));


        var rARFilePathParameter = rARFilePath != null ?
            new ObjectParameter("RARFilePath", rARFilePath) :
            new ObjectParameter("RARFilePath", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatotNameParameter = creatotName != null ?
            new ObjectParameter("CreatotName", creatotName) :
            new ObjectParameter("CreatotName", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        var genCloneIDParameter = genCloneID.HasValue ?
            new ObjectParameter("GenCloneID", genCloneID) :
            new ObjectParameter("GenCloneID", typeof(int));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAllGenerateClone", userIDParameter, cloneIdParameter, titleParameter, tagParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, uploadFilePathParameter, matrixFilePathParameter, composerNameParameter, producerParameter, publisherParameter, selectedInteruptionFileParameter, interuptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadImageFilePathParameter, uploadPDFFilePathParameter, pagePercentageParameter, typeParameter, pdfFilePathParameter, fileNamesParameter, videoFilePathParameter, waterMarkMatrixImagePathParameter, waterMarkMatrixImageTextParameter, videoCategoryParameter, rARFilePathParameter, matrixImagePathParameter, creatotNameParameter, catIDParameter, genCloneIDParameter, modifyDateParameter, isActiveParameter, trackingNumberParameter);
    }


    public virtual int sp_UpdateAphidTiseAccount(string companyName, string firstName, string lastName, string emailAddress, string dOB, string phone, string informations, string website, string productService, Nullable<System.Guid> original_AphidTiseUserID)
    {

        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var informationsParameter = informations != null ?
            new ObjectParameter("Informations", informations) :
            new ObjectParameter("Informations", typeof(string));


        var websiteParameter = website != null ?
            new ObjectParameter("Website", website) :
            new ObjectParameter("Website", typeof(string));


        var productServiceParameter = productService != null ?
            new ObjectParameter("ProductService", productService) :
            new ObjectParameter("ProductService", typeof(string));


        var original_AphidTiseUserIDParameter = original_AphidTiseUserID.HasValue ?
            new ObjectParameter("Original_AphidTiseUserID", original_AphidTiseUserID) :
            new ObjectParameter("Original_AphidTiseUserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAphidTiseAccount", companyNameParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, informationsParameter, websiteParameter, productServiceParameter, original_AphidTiseUserIDParameter);
    }


    public virtual int sp_UpdateBankAccountDetails(Nullable<System.Guid> bankAccountID, Nullable<long> cradNumber, Nullable<short> expiryMonth, Nullable<int> expiryYear, string cSV, string nameOnCard)
    {

        var bankAccountIDParameter = bankAccountID.HasValue ?
            new ObjectParameter("BankAccountID", bankAccountID) :
            new ObjectParameter("BankAccountID", typeof(System.Guid));


        var cradNumberParameter = cradNumber.HasValue ?
            new ObjectParameter("CradNumber", cradNumber) :
            new ObjectParameter("CradNumber", typeof(long));


        var expiryMonthParameter = expiryMonth.HasValue ?
            new ObjectParameter("ExpiryMonth", expiryMonth) :
            new ObjectParameter("ExpiryMonth", typeof(short));


        var expiryYearParameter = expiryYear.HasValue ?
            new ObjectParameter("ExpiryYear", expiryYear) :
            new ObjectParameter("ExpiryYear", typeof(int));


        var cSVParameter = cSV != null ?
            new ObjectParameter("CSV", cSV) :
            new ObjectParameter("CSV", typeof(string));


        var nameOnCardParameter = nameOnCard != null ?
            new ObjectParameter("NameOnCard", nameOnCard) :
            new ObjectParameter("NameOnCard", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBankAccountDetails", bankAccountIDParameter, cradNumberParameter, expiryMonthParameter, expiryYearParameter, cSVParameter, nameOnCardParameter);
    }


    public virtual int sp_UpdateBasicCloneModel(Nullable<System.Guid> userID, string title, string tags, string artistName, string albumTitle, string uploadFileAudioPath, string matrixImagePath, string composer, string publisher, string producer, string selectIntFile, string interruptionStyle, string availableForDownload, string explicitContent, string uploadFileImagePath, string uploadFilePDFPath, string pagePercentage, string watermarkMatrixImagePath, string watermarkMatrixImageText, string videoCategory, string trackingNumber, string total_Length, Nullable<System.DateTime> modified_Time, string videoPath, string rarPath)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagsParameter = tags != null ?
            new ObjectParameter("Tags", tags) :
            new ObjectParameter("Tags", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var uploadFileAudioPathParameter = uploadFileAudioPath != null ?
            new ObjectParameter("UploadFileAudioPath", uploadFileAudioPath) :
            new ObjectParameter("UploadFileAudioPath", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var composerParameter = composer != null ?
            new ObjectParameter("Composer", composer) :
            new ObjectParameter("Composer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var selectIntFileParameter = selectIntFile != null ?
            new ObjectParameter("SelectIntFile", selectIntFile) :
            new ObjectParameter("SelectIntFile", typeof(string));


        var interruptionStyleParameter = interruptionStyle != null ?
            new ObjectParameter("InterruptionStyle", interruptionStyle) :
            new ObjectParameter("InterruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var uploadFileImagePathParameter = uploadFileImagePath != null ?
            new ObjectParameter("UploadFileImagePath", uploadFileImagePath) :
            new ObjectParameter("UploadFileImagePath", typeof(string));


        var uploadFilePDFPathParameter = uploadFilePDFPath != null ?
            new ObjectParameter("UploadFilePDFPath", uploadFilePDFPath) :
            new ObjectParameter("UploadFilePDFPath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var watermarkMatrixImagePathParameter = watermarkMatrixImagePath != null ?
            new ObjectParameter("WatermarkMatrixImagePath", watermarkMatrixImagePath) :
            new ObjectParameter("WatermarkMatrixImagePath", typeof(string));


        var watermarkMatrixImageTextParameter = watermarkMatrixImageText != null ?
            new ObjectParameter("WatermarkMatrixImageText", watermarkMatrixImageText) :
            new ObjectParameter("WatermarkMatrixImageText", typeof(string));


        var videoCategoryParameter = videoCategory != null ?
            new ObjectParameter("VideoCategory", videoCategory) :
            new ObjectParameter("VideoCategory", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var total_LengthParameter = total_Length != null ?
            new ObjectParameter("Total_Length", total_Length) :
            new ObjectParameter("Total_Length", typeof(string));


        var modified_TimeParameter = modified_Time.HasValue ?
            new ObjectParameter("Modified_Time", modified_Time) :
            new ObjectParameter("Modified_Time", typeof(System.DateTime));


        var videoPathParameter = videoPath != null ?
            new ObjectParameter("VideoPath", videoPath) :
            new ObjectParameter("VideoPath", typeof(string));


        var rarPathParameter = rarPath != null ?
            new ObjectParameter("RarPath", rarPath) :
            new ObjectParameter("RarPath", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBasicCloneModel", userIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, uploadFileAudioPathParameter, matrixImagePathParameter, composerParameter, publisherParameter, producerParameter, selectIntFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadFileImagePathParameter, uploadFilePDFPathParameter, pagePercentageParameter, watermarkMatrixImagePathParameter, watermarkMatrixImageTextParameter, videoCategoryParameter, trackingNumberParameter, total_LengthParameter, modified_TimeParameter, videoPathParameter, rarPathParameter);
    }


    public virtual int sp_UpdateByterAccount(Nullable<System.Guid> userID, string firstName, string lastName, string emailAddress, string dOB, string phone, string recoveryEmail)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("userID", userID) :
            new ObjectParameter("userID", typeof(System.Guid));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var recoveryEmailParameter = recoveryEmail != null ?
            new ObjectParameter("RecoveryEmail", recoveryEmail) :
            new ObjectParameter("RecoveryEmail", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateByterAccount", userIDParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, recoveryEmailParameter);
    }


    public virtual int sp_UpdateCreateLinkPost(string title, string channel, Nullable<int> noOfClones, Nullable<int> views, Nullable<int> downloads, string fileSize, string trackingNo, Nullable<System.DateTime> postedDate, string category, Nullable<System.Guid> userId)
    {

        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var channelParameter = channel != null ?
            new ObjectParameter("Channel", channel) :
            new ObjectParameter("Channel", typeof(string));


        var noOfClonesParameter = noOfClones.HasValue ?
            new ObjectParameter("NoOfClones", noOfClones) :
            new ObjectParameter("NoOfClones", typeof(int));


        var viewsParameter = views.HasValue ?
            new ObjectParameter("Views", views) :
            new ObjectParameter("Views", typeof(int));


        var downloadsParameter = downloads.HasValue ?
            new ObjectParameter("Downloads", downloads) :
            new ObjectParameter("Downloads", typeof(int));


        var fileSizeParameter = fileSize != null ?
            new ObjectParameter("FileSize", fileSize) :
            new ObjectParameter("FileSize", typeof(string));


        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        var postedDateParameter = postedDate.HasValue ?
            new ObjectParameter("PostedDate", postedDate) :
            new ObjectParameter("PostedDate", typeof(System.DateTime));


        var categoryParameter = category != null ?
            new ObjectParameter("Category", category) :
            new ObjectParameter("Category", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCreateLinkPost", titleParameter, channelParameter, noOfClonesParameter, viewsParameter, downloadsParameter, fileSizeParameter, trackingNoParameter, postedDateParameter, categoryParameter, userIdParameter);
    }


    public virtual int sp_UpdateIntrepputedFiles(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string interruptFilePath, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive, string fileName, string videoPath, string trackingNumber, string flag)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIdParameter = cloneId.HasValue ?
            new ObjectParameter("CloneId", cloneId) :
            new ObjectParameter("CloneId", typeof(System.Guid));


        var interruptFilePathParameter = interruptFilePath != null ?
            new ObjectParameter("InterruptFilePath", interruptFilePath) :
            new ObjectParameter("InterruptFilePath", typeof(string));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var fileNameParameter = fileName != null ?
            new ObjectParameter("FileName", fileName) :
            new ObjectParameter("FileName", typeof(string));


        var videoPathParameter = videoPath != null ?
            new ObjectParameter("VideoPath", videoPath) :
            new ObjectParameter("VideoPath", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateIntrepputedFiles", userIDParameter, cloneIdParameter, interruptFilePathParameter, createdDateParameter, modifiedDateParameter, isActiveParameter, fileNameParameter, videoPathParameter, trackingNumberParameter, flagParameter);
    }


    public virtual int sp_UpdatePersonAddress(Nullable<System.Guid> addressID, string addressLine1, string addressLine2, string city, string region, string postalCode)
    {

        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var addressLine1Parameter = addressLine1 != null ?
            new ObjectParameter("AddressLine1", addressLine1) :
            new ObjectParameter("AddressLine1", typeof(string));


        var addressLine2Parameter = addressLine2 != null ?
            new ObjectParameter("AddressLine2", addressLine2) :
            new ObjectParameter("AddressLine2", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var regionParameter = region != null ?
            new ObjectParameter("Region", region) :
            new ObjectParameter("Region", typeof(string));


        var postalCodeParameter = postalCode != null ?
            new ObjectParameter("PostalCode", postalCode) :
            new ObjectParameter("PostalCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePersonAddress", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, regionParameter, postalCodeParameter);
    }


    public virtual int sp_UpdatePremiumAccount(Nullable<System.Guid> premiumUserID, string password, string firstName, string lastName, string dOB, string biography, string website, string emailAddress, string recoveryEmail, string phone)
    {

        var premiumUserIDParameter = premiumUserID.HasValue ?
            new ObjectParameter("PremiumUserID", premiumUserID) :
            new ObjectParameter("PremiumUserID", typeof(System.Guid));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var biographyParameter = biography != null ?
            new ObjectParameter("Biography", biography) :
            new ObjectParameter("Biography", typeof(string));


        var websiteParameter = website != null ?
            new ObjectParameter("Website", website) :
            new ObjectParameter("Website", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var recoveryEmailParameter = recoveryEmail != null ?
            new ObjectParameter("RecoveryEmail", recoveryEmail) :
            new ObjectParameter("RecoveryEmail", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePremiumAccount", premiumUserIDParameter, passwordParameter, firstNameParameter, lastNameParameter, dOBParameter, biographyParameter, websiteParameter, emailAddressParameter, recoveryEmailParameter, phoneParameter);
    }


    public virtual int sp_UpdatePremiumClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string audioFilePath, string composerName, string producer, string publisher, string selectedInterruptionFile, string interruptionStyle, string availableForDownload, string explicitContent, string type, string pDFFilePath, string videoFilePath, string pagePercentage, string rARFilePAth, string matrixImagePath, string creatorName, string imageFile, Nullable<int> catID, Nullable<System.DateTime> modifyDate, Nullable<bool> isActive, string trackingNumber, string total_Length)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIDParameter = cloneID.HasValue ?
            new ObjectParameter("CloneID", cloneID) :
            new ObjectParameter("CloneID", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagsParameter = tags != null ?
            new ObjectParameter("Tags", tags) :
            new ObjectParameter("Tags", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInterruptionFileParameter = selectedInterruptionFile != null ?
            new ObjectParameter("SelectedInterruptionFile", selectedInterruptionFile) :
            new ObjectParameter("SelectedInterruptionFile", typeof(string));


        var interruptionStyleParameter = interruptionStyle != null ?
            new ObjectParameter("InterruptionStyle", interruptionStyle) :
            new ObjectParameter("InterruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pDFFilePathParameter = pDFFilePath != null ?
            new ObjectParameter("PDFFilePath", pDFFilePath) :
            new ObjectParameter("PDFFilePath", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var rARFilePAthParameter = rARFilePAth != null ?
            new ObjectParameter("RARFilePAth", rARFilePAth) :
            new ObjectParameter("RARFilePAth", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatorNameParameter = creatorName != null ?
            new ObjectParameter("CreatorName", creatorName) :
            new ObjectParameter("CreatorName", typeof(string));


        var imageFileParameter = imageFile != null ?
            new ObjectParameter("ImageFile", imageFile) :
            new ObjectParameter("ImageFile", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        var total_LengthParameter = total_Length != null ?
            new ObjectParameter("Total_Length", total_Length) :
            new ObjectParameter("Total_Length", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePremiumClone", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, composerNameParameter, producerParameter, publisherParameter, selectedInterruptionFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, typeParameter, pDFFilePathParameter, videoFilePathParameter, pagePercentageParameter, rARFilePAthParameter, matrixImagePathParameter, creatorNameParameter, imageFileParameter, catIDParameter, modifyDateParameter, isActiveParameter, trackingNumberParameter, total_LengthParameter);
    }


    public virtual int sp_UpdatePremiumCloneModel(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string audioFilePath, string imageFile, string composerName, string producer, string publisher, string selectedInterruptionFile, string interruptionStyle, string availableForDownload, string explicitContent, string type, string pDFFilePath, string videoFilePath, string pagePercentage, string rARFilePAth, string matrixImagePath, string creatorName, string trackingNumber)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var cloneIDParameter = cloneID.HasValue ?
            new ObjectParameter("CloneID", cloneID) :
            new ObjectParameter("CloneID", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var tagsParameter = tags != null ?
            new ObjectParameter("Tags", tags) :
            new ObjectParameter("Tags", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("ArtistName", artistName) :
            new ObjectParameter("ArtistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("AlbumTitle", albumTitle) :
            new ObjectParameter("AlbumTitle", typeof(string));


        var audioFilePathParameter = audioFilePath != null ?
            new ObjectParameter("AudioFilePath", audioFilePath) :
            new ObjectParameter("AudioFilePath", typeof(string));


        var imageFileParameter = imageFile != null ?
            new ObjectParameter("ImageFile", imageFile) :
            new ObjectParameter("ImageFile", typeof(string));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("Producer", producer) :
            new ObjectParameter("Producer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("Publisher", publisher) :
            new ObjectParameter("Publisher", typeof(string));


        var selectedInterruptionFileParameter = selectedInterruptionFile != null ?
            new ObjectParameter("SelectedInterruptionFile", selectedInterruptionFile) :
            new ObjectParameter("SelectedInterruptionFile", typeof(string));


        var interruptionStyleParameter = interruptionStyle != null ?
            new ObjectParameter("InterruptionStyle", interruptionStyle) :
            new ObjectParameter("InterruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("AvailableForDownload", availableForDownload) :
            new ObjectParameter("AvailableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("ExplicitContent", explicitContent) :
            new ObjectParameter("ExplicitContent", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var pDFFilePathParameter = pDFFilePath != null ?
            new ObjectParameter("PDFFilePath", pDFFilePath) :
            new ObjectParameter("PDFFilePath", typeof(string));


        var videoFilePathParameter = videoFilePath != null ?
            new ObjectParameter("VideoFilePath", videoFilePath) :
            new ObjectParameter("VideoFilePath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("PagePercentage", pagePercentage) :
            new ObjectParameter("PagePercentage", typeof(string));


        var rARFilePAthParameter = rARFilePAth != null ?
            new ObjectParameter("RARFilePAth", rARFilePAth) :
            new ObjectParameter("RARFilePAth", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var creatorNameParameter = creatorName != null ?
            new ObjectParameter("CreatorName", creatorName) :
            new ObjectParameter("CreatorName", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("TrackingNumber", trackingNumber) :
            new ObjectParameter("TrackingNumber", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePremiumCloneModel", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, imageFileParameter, composerNameParameter, producerParameter, publisherParameter, selectedInterruptionFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, typeParameter, pDFFilePathParameter, videoFilePathParameter, pagePercentageParameter, rARFilePAthParameter, matrixImagePathParameter, creatorNameParameter, trackingNumberParameter);
    }


    public virtual int sp_UpdateSecurityQuestions(Nullable<System.Guid> securityQuestionID, string securityQuestion1, string answer1, string securityQuestion2, string answer2)
    {

        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var securityQuestion1Parameter = securityQuestion1 != null ?
            new ObjectParameter("SecurityQuestion1", securityQuestion1) :
            new ObjectParameter("SecurityQuestion1", typeof(string));


        var answer1Parameter = answer1 != null ?
            new ObjectParameter("Answer1", answer1) :
            new ObjectParameter("Answer1", typeof(string));


        var securityQuestion2Parameter = securityQuestion2 != null ?
            new ObjectParameter("SecurityQuestion2", securityQuestion2) :
            new ObjectParameter("SecurityQuestion2", typeof(string));


        var answer2Parameter = answer2 != null ?
            new ObjectParameter("Answer2", answer2) :
            new ObjectParameter("Answer2", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSecurityQuestions", securityQuestionIDParameter, securityQuestion1Parameter, answer1Parameter, securityQuestion2Parameter, answer2Parameter);
    }


    public virtual int sp_UpdateSurveyQuestion(Nullable<System.Guid> surveyID, string question, string option1, string option2, string option3, string option4, string option5, string option6, string option7, string option8)
    {

        var surveyIDParameter = surveyID.HasValue ?
            new ObjectParameter("SurveyID", surveyID) :
            new ObjectParameter("SurveyID", typeof(System.Guid));


        var questionParameter = question != null ?
            new ObjectParameter("Question", question) :
            new ObjectParameter("Question", typeof(string));


        var option1Parameter = option1 != null ?
            new ObjectParameter("Option1", option1) :
            new ObjectParameter("Option1", typeof(string));


        var option2Parameter = option2 != null ?
            new ObjectParameter("Option2", option2) :
            new ObjectParameter("Option2", typeof(string));


        var option3Parameter = option3 != null ?
            new ObjectParameter("Option3", option3) :
            new ObjectParameter("Option3", typeof(string));


        var option4Parameter = option4 != null ?
            new ObjectParameter("Option4", option4) :
            new ObjectParameter("Option4", typeof(string));


        var option5Parameter = option5 != null ?
            new ObjectParameter("Option5", option5) :
            new ObjectParameter("Option5", typeof(string));


        var option6Parameter = option6 != null ?
            new ObjectParameter("Option6", option6) :
            new ObjectParameter("Option6", typeof(string));


        var option7Parameter = option7 != null ?
            new ObjectParameter("Option7", option7) :
            new ObjectParameter("Option7", typeof(string));


        var option8Parameter = option8 != null ?
            new ObjectParameter("Option8", option8) :
            new ObjectParameter("Option8", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSurveyQuestion", surveyIDParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, option5Parameter, option6Parameter, option7Parameter, option8Parameter);
    }


    public virtual int sp_UpdateUsers(string picturePath, Nullable<int> pictureServerId, Nullable<System.Guid> original_UserId)
    {

        var picturePathParameter = picturePath != null ?
            new ObjectParameter("PicturePath", picturePath) :
            new ObjectParameter("PicturePath", typeof(string));


        var pictureServerIdParameter = pictureServerId.HasValue ?
            new ObjectParameter("PictureServerId", pictureServerId) :
            new ObjectParameter("PictureServerId", typeof(int));


        var original_UserIdParameter = original_UserId.HasValue ?
            new ObjectParameter("Original_UserId", original_UserId) :
            new ObjectParameter("Original_UserId", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUsers", picturePathParameter, pictureServerIdParameter, original_UserIdParameter);
    }


    public virtual int sp_UserActivation(Nullable<System.Guid> userId, Nullable<System.Guid> tokenId, string userName, Nullable<bool> status)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var tokenIdParameter = tokenId.HasValue ?
            new ObjectParameter("TokenId", tokenId) :
            new ObjectParameter("TokenId", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var statusParameter = status.HasValue ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserActivation", userIdParameter, tokenIdParameter, userNameParameter, statusParameter);
    }


    public virtual ObjectResult<sp_UserChannelSubs_Result> sp_UserChannelSubs(Nullable<System.Guid> userid)
    {

        var useridParameter = userid.HasValue ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserChannelSubs_Result>("sp_UserChannelSubs", useridParameter);
    }


    public virtual int sp_UserNameEmailAlreadyExists(string userName, string emailAddress, ObjectParameter isExists)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserNameEmailAlreadyExists", userNameParameter, emailAddressParameter, isExists);
    }


    public virtual ObjectResult<sp_VerifyUser_Result> sp_VerifyUser(string token)
    {

        var tokenParameter = token != null ?
            new ObjectParameter("token", token) :
            new ObjectParameter("token", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VerifyUser_Result>("sp_VerifyUser", tokenParameter);
    }


    public virtual int uspCreateUser(string mobileNo, string bloodGroup, Nullable<System.Guid> userId)
    {

        var mobileNoParameter = mobileNo != null ?
            new ObjectParameter("MobileNo", mobileNo) :
            new ObjectParameter("MobileNo", typeof(string));


        var bloodGroupParameter = bloodGroup != null ?
            new ObjectParameter("BloodGroup", bloodGroup) :
            new ObjectParameter("BloodGroup", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateUser", mobileNoParameter, bloodGroupParameter, userIdParameter);
    }


    public virtual int sp_UpdateAphidLAbAccount(Nullable<System.Guid> userId, string userEmail, string firstName, string lastName, string dOB, string phonenumber, string websiteUrl, string recoveryEmail)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var userEmailParameter = userEmail != null ?
            new ObjectParameter("UserEmail", userEmail) :
            new ObjectParameter("UserEmail", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phonenumberParameter = phonenumber != null ?
            new ObjectParameter("Phonenumber", phonenumber) :
            new ObjectParameter("Phonenumber", typeof(string));


        var websiteUrlParameter = websiteUrl != null ?
            new ObjectParameter("WebsiteUrl", websiteUrl) :
            new ObjectParameter("WebsiteUrl", typeof(string));


        var recoveryEmailParameter = recoveryEmail != null ?
            new ObjectParameter("RecoveryEmail", recoveryEmail) :
            new ObjectParameter("RecoveryEmail", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAphidLAbAccount", userIdParameter, userEmailParameter, firstNameParameter, lastNameParameter, dOBParameter, phonenumberParameter, websiteUrlParameter, recoveryEmailParameter);
    }


    public virtual int sp_InsertAphidlAbSoftware(Nullable<System.Guid> userID, Nullable<System.Guid> softwareID, string softwareTitle, string matrixImagePath, string avalibaleForDownload, string downloadPassword, string softwareDeiscription, Nullable<System.DateTime> dateCreated)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var softwareIDParameter = softwareID.HasValue ?
            new ObjectParameter("SoftwareID", softwareID) :
            new ObjectParameter("SoftwareID", typeof(System.Guid));


        var softwareTitleParameter = softwareTitle != null ?
            new ObjectParameter("SoftwareTitle", softwareTitle) :
            new ObjectParameter("SoftwareTitle", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var avalibaleForDownloadParameter = avalibaleForDownload != null ?
            new ObjectParameter("AvalibaleForDownload", avalibaleForDownload) :
            new ObjectParameter("AvalibaleForDownload", typeof(string));


        var downloadPasswordParameter = downloadPassword != null ?
            new ObjectParameter("DownloadPassword", downloadPassword) :
            new ObjectParameter("DownloadPassword", typeof(string));


        var softwareDeiscriptionParameter = softwareDeiscription != null ?
            new ObjectParameter("SoftwareDeiscription", softwareDeiscription) :
            new ObjectParameter("SoftwareDeiscription", typeof(string));


        var dateCreatedParameter = dateCreated.HasValue ?
            new ObjectParameter("DateCreated", dateCreated) :
            new ObjectParameter("DateCreated", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAphidlAbSoftware", userIDParameter, softwareIDParameter, softwareTitleParameter, matrixImagePathParameter, avalibaleForDownloadParameter, downloadPasswordParameter, softwareDeiscriptionParameter, dateCreatedParameter);
    }


    public virtual int sp_InsertAphidlAbVideo(Nullable<System.Guid> userID, Nullable<System.Guid> videoID, string videoTitle, string matrixImagePath, string interuptionFilePath, string interuptionStyle, string avalibaleForDownload, string excplictContent, string downloadPassword, string videoDeiscription, Nullable<System.DateTime> dateCreated)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var videoIDParameter = videoID.HasValue ?
            new ObjectParameter("VideoID", videoID) :
            new ObjectParameter("VideoID", typeof(System.Guid));


        var videoTitleParameter = videoTitle != null ?
            new ObjectParameter("VideoTitle", videoTitle) :
            new ObjectParameter("VideoTitle", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        var interuptionFilePathParameter = interuptionFilePath != null ?
            new ObjectParameter("InteruptionFilePath", interuptionFilePath) :
            new ObjectParameter("InteruptionFilePath", typeof(string));


        var interuptionStyleParameter = interuptionStyle != null ?
            new ObjectParameter("InteruptionStyle", interuptionStyle) :
            new ObjectParameter("InteruptionStyle", typeof(string));


        var avalibaleForDownloadParameter = avalibaleForDownload != null ?
            new ObjectParameter("AvalibaleForDownload", avalibaleForDownload) :
            new ObjectParameter("AvalibaleForDownload", typeof(string));


        var excplictContentParameter = excplictContent != null ?
            new ObjectParameter("ExcplictContent", excplictContent) :
            new ObjectParameter("ExcplictContent", typeof(string));


        var downloadPasswordParameter = downloadPassword != null ?
            new ObjectParameter("DownloadPassword", downloadPassword) :
            new ObjectParameter("DownloadPassword", typeof(string));


        var videoDeiscriptionParameter = videoDeiscription != null ?
            new ObjectParameter("VideoDeiscription", videoDeiscription) :
            new ObjectParameter("VideoDeiscription", typeof(string));


        var dateCreatedParameter = dateCreated.HasValue ?
            new ObjectParameter("DateCreated", dateCreated) :
            new ObjectParameter("DateCreated", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAphidlAbVideo", userIDParameter, videoIDParameter, videoTitleParameter, matrixImagePathParameter, interuptionFilePathParameter, interuptionStyleParameter, avalibaleForDownloadParameter, excplictContentParameter, downloadPasswordParameter, videoDeiscriptionParameter, dateCreatedParameter);
    }


    public virtual int sp_DeleteAllData()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllData");
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_GetUserListrecovery_Result> sp_GetUserListrecovery()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserListrecovery_Result>("sp_GetUserListrecovery");
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_InsertUsersbyEmailAddress(Nullable<System.Guid> userId, string userName, string userPassword, Nullable<bool> userStatus, Nullable<int> accountTypeID, string emailAddress)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        var userStatusParameter = userStatus.HasValue ?
            new ObjectParameter("UserStatus", userStatus) :
            new ObjectParameter("UserStatus", typeof(bool));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUsersbyEmailAddress", userIdParameter, userNameParameter, userPasswordParameter, userStatusParameter, accountTypeIDParameter, emailAddressParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual int sp_InsertAphidlabAccount(Nullable<System.Guid> userID, string developerName, string userEmail, string password, string firstName, string lastName, string dOB, string phonenumber, string websiteUrl, string channelUrl, Nullable<System.Guid> addressId, Nullable<System.Guid> securityQuestionID, Nullable<int> accountid, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updateDate, Nullable<bool> isActive)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        var developerNameParameter = developerName != null ?
            new ObjectParameter("DeveloperName", developerName) :
            new ObjectParameter("DeveloperName", typeof(string));


        var userEmailParameter = userEmail != null ?
            new ObjectParameter("UserEmail", userEmail) :
            new ObjectParameter("UserEmail", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phonenumberParameter = phonenumber != null ?
            new ObjectParameter("Phonenumber", phonenumber) :
            new ObjectParameter("Phonenumber", typeof(string));


        var websiteUrlParameter = websiteUrl != null ?
            new ObjectParameter("WebsiteUrl", websiteUrl) :
            new ObjectParameter("WebsiteUrl", typeof(string));


        var channelUrlParameter = channelUrl != null ?
            new ObjectParameter("ChannelUrl", channelUrl) :
            new ObjectParameter("ChannelUrl", typeof(string));


        var addressIdParameter = addressId.HasValue ?
            new ObjectParameter("AddressId", addressId) :
            new ObjectParameter("AddressId", typeof(System.Guid));


        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var accountidParameter = accountid.HasValue ?
            new ObjectParameter("Accountid", accountid) :
            new ObjectParameter("Accountid", typeof(int));


        var createdDateParameter = createdDate.HasValue ?
            new ObjectParameter("CreatedDate", createdDate) :
            new ObjectParameter("CreatedDate", typeof(System.DateTime));


        var updateDateParameter = updateDate.HasValue ?
            new ObjectParameter("UpdateDate", updateDate) :
            new ObjectParameter("UpdateDate", typeof(System.DateTime));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAphidlabAccount", userIDParameter, developerNameParameter, userEmailParameter, passwordParameter, firstNameParameter, lastNameParameter, dOBParameter, phonenumberParameter, websiteUrlParameter, channelUrlParameter, addressIdParameter, securityQuestionIDParameter, accountidParameter, createdDateParameter, updateDateParameter, isActiveParameter);
    }


    public virtual int sp_InsertAphidTiseRegstration(Nullable<System.Guid> aphidTiseUserID, string companyName, string password, string firstName, string lastName, string emailAddress, string dOB, string phone, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete, string informations, string website, string productService)
    {

        var aphidTiseUserIDParameter = aphidTiseUserID.HasValue ?
            new ObjectParameter("AphidTiseUserID", aphidTiseUserID) :
            new ObjectParameter("AphidTiseUserID", typeof(System.Guid));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isDeleteParameter = isDelete.HasValue ?
            new ObjectParameter("IsDelete", isDelete) :
            new ObjectParameter("IsDelete", typeof(bool));


        var informationsParameter = informations != null ?
            new ObjectParameter("Informations", informations) :
            new ObjectParameter("Informations", typeof(string));


        var websiteParameter = website != null ?
            new ObjectParameter("Website", website) :
            new ObjectParameter("Website", typeof(string));


        var productServiceParameter = productService != null ?
            new ObjectParameter("ProductService", productService) :
            new ObjectParameter("ProductService", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAphidTiseRegstration", aphidTiseUserIDParameter, companyNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter, informationsParameter, websiteParameter, productServiceParameter);
    }


    public virtual int sp_InsertPremiumAccount(Nullable<System.Guid> premiumUserID, string composerName, string password, string dOB, string firstName, string lastName, string biography, string website, string emailAddress, string phone, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
    {

        var premiumUserIDParameter = premiumUserID.HasValue ?
            new ObjectParameter("PremiumUserID", premiumUserID) :
            new ObjectParameter("PremiumUserID", typeof(System.Guid));


        var composerNameParameter = composerName != null ?
            new ObjectParameter("ComposerName", composerName) :
            new ObjectParameter("ComposerName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var biographyParameter = biography != null ?
            new ObjectParameter("Biography", biography) :
            new ObjectParameter("Biography", typeof(string));


        var websiteParameter = website != null ?
            new ObjectParameter("Website", website) :
            new ObjectParameter("Website", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isDeleteParameter = isDelete.HasValue ?
            new ObjectParameter("IsDelete", isDelete) :
            new ObjectParameter("IsDelete", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPremiumAccount", premiumUserIDParameter, composerNameParameter, passwordParameter, dOBParameter, firstNameParameter, lastNameParameter, biographyParameter, websiteParameter, emailAddressParameter, phoneParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
    }


    public virtual ObjectResult<sp_AphidLAbAccountInfo_Result> sp_AphidLAbAccountInfo(Nullable<System.Guid> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AphidLAbAccountInfo_Result>("sp_AphidLAbAccountInfo", userIDParameter);
    }


    public virtual int sp_CreateLinkPost(string title, string channel, Nullable<int> noOfClones, Nullable<int> views, Nullable<int> downloads, string fileSize, string trackingNo, Nullable<System.DateTime> postedDate, string category, Nullable<System.Guid> userId, string matrixImagePath)
    {

        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));


        var channelParameter = channel != null ?
            new ObjectParameter("Channel", channel) :
            new ObjectParameter("Channel", typeof(string));


        var noOfClonesParameter = noOfClones.HasValue ?
            new ObjectParameter("NoOfClones", noOfClones) :
            new ObjectParameter("NoOfClones", typeof(int));


        var viewsParameter = views.HasValue ?
            new ObjectParameter("Views", views) :
            new ObjectParameter("Views", typeof(int));


        var downloadsParameter = downloads.HasValue ?
            new ObjectParameter("Downloads", downloads) :
            new ObjectParameter("Downloads", typeof(int));


        var fileSizeParameter = fileSize != null ?
            new ObjectParameter("FileSize", fileSize) :
            new ObjectParameter("FileSize", typeof(string));


        var trackingNoParameter = trackingNo != null ?
            new ObjectParameter("TrackingNo", trackingNo) :
            new ObjectParameter("TrackingNo", typeof(string));


        var postedDateParameter = postedDate.HasValue ?
            new ObjectParameter("PostedDate", postedDate) :
            new ObjectParameter("PostedDate", typeof(System.DateTime));


        var categoryParameter = category != null ?
            new ObjectParameter("Category", category) :
            new ObjectParameter("Category", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("MatrixImagePath", matrixImagePath) :
            new ObjectParameter("MatrixImagePath", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateLinkPost", titleParameter, channelParameter, noOfClonesParameter, viewsParameter, downloadsParameter, fileSizeParameter, trackingNoParameter, postedDateParameter, categoryParameter, userIdParameter, matrixImagePathParameter);
    }


    public virtual ObjectResult<sp_GetMessages_Result> sp_GetMessages(string emailid)
    {

        var emailidParameter = emailid != null ?
            new ObjectParameter("emailid", emailid) :
            new ObjectParameter("emailid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMessages_Result>("sp_GetMessages", emailidParameter);
    }


    public virtual int sp_Messages(string emailid_sender, string emailid_receiver, string message_subject, string message_body, Nullable<bool> message_status, string sender_name, string receiver_name, Nullable<System.DateTime> sending_date, Nullable<bool> is_Read)
    {

        var emailid_senderParameter = emailid_sender != null ?
            new ObjectParameter("emailid_sender", emailid_sender) :
            new ObjectParameter("emailid_sender", typeof(string));


        var emailid_receiverParameter = emailid_receiver != null ?
            new ObjectParameter("emailid_receiver", emailid_receiver) :
            new ObjectParameter("emailid_receiver", typeof(string));


        var message_subjectParameter = message_subject != null ?
            new ObjectParameter("message_subject", message_subject) :
            new ObjectParameter("message_subject", typeof(string));


        var message_bodyParameter = message_body != null ?
            new ObjectParameter("message_body", message_body) :
            new ObjectParameter("message_body", typeof(string));


        var message_statusParameter = message_status.HasValue ?
            new ObjectParameter("message_status", message_status) :
            new ObjectParameter("message_status", typeof(bool));


        var sender_nameParameter = sender_name != null ?
            new ObjectParameter("sender_name", sender_name) :
            new ObjectParameter("sender_name", typeof(string));


        var receiver_nameParameter = receiver_name != null ?
            new ObjectParameter("receiver_name", receiver_name) :
            new ObjectParameter("receiver_name", typeof(string));


        var sending_dateParameter = sending_date.HasValue ?
            new ObjectParameter("sending_date", sending_date) :
            new ObjectParameter("sending_date", typeof(System.DateTime));


        var is_ReadParameter = is_Read.HasValue ?
            new ObjectParameter("Is_Read", is_Read) :
            new ObjectParameter("Is_Read", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Messages", emailid_senderParameter, emailid_receiverParameter, message_subjectParameter, message_bodyParameter, message_statusParameter, sender_nameParameter, receiver_nameParameter, sending_dateParameter, is_ReadParameter);
    }


    public virtual int sp_updatbasicaccount(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updatbasicaccount", usidParameter, isActiveParameter);
    }


    public virtual int sp_updatbasicaccount1(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updatbasicaccount1", usidParameter, isActiveParameter);
    }


    public virtual int sp_InsertBasicAccount(Nullable<System.Guid> basicUserID, string userName, string password, string firstName, string lastName, string emailAddress, string dOB, string phone, string audioInterruptionFile, string waterMarkImage, string webSiteUrl, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
    {

        var basicUserIDParameter = basicUserID.HasValue ?
            new ObjectParameter("BasicUserID", basicUserID) :
            new ObjectParameter("BasicUserID", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var audioInterruptionFileParameter = audioInterruptionFile != null ?
            new ObjectParameter("AudioInterruptionFile", audioInterruptionFile) :
            new ObjectParameter("AudioInterruptionFile", typeof(string));


        var waterMarkImageParameter = waterMarkImage != null ?
            new ObjectParameter("WaterMarkImage", waterMarkImage) :
            new ObjectParameter("WaterMarkImage", typeof(string));


        var webSiteUrlParameter = webSiteUrl != null ?
            new ObjectParameter("WebSiteUrl", webSiteUrl) :
            new ObjectParameter("WebSiteUrl", typeof(string));


        var addressIDParameter = addressID.HasValue ?
            new ObjectParameter("AddressID", addressID) :
            new ObjectParameter("AddressID", typeof(System.Guid));


        var securityQuestionIDParameter = securityQuestionID.HasValue ?
            new ObjectParameter("SecurityQuestionID", securityQuestionID) :
            new ObjectParameter("SecurityQuestionID", typeof(System.Guid));


        var accountTypeIDParameter = accountTypeID.HasValue ?
            new ObjectParameter("AccountTypeID", accountTypeID) :
            new ObjectParameter("AccountTypeID", typeof(int));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifyDateParameter = modifyDate.HasValue ?
            new ObjectParameter("ModifyDate", modifyDate) :
            new ObjectParameter("ModifyDate", typeof(System.DateTime));


        var isDeleteParameter = isDelete.HasValue ?
            new ObjectParameter("IsDelete", isDelete) :
            new ObjectParameter("IsDelete", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBasicAccount", basicUserIDParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, audioInterruptionFileParameter, waterMarkImageParameter, webSiteUrlParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
    }


    public virtual int sp_UpdateBasicAccount(Nullable<System.Guid> basicUserID, string password, string firstName, string lastName, string emailAddress, string dOB, string phone, string audioInterruption, string watermarkImage, string webSiteUrl, string recoveryEmail)
    {

        var basicUserIDParameter = basicUserID.HasValue ?
            new ObjectParameter("BasicUserID", basicUserID) :
            new ObjectParameter("BasicUserID", typeof(System.Guid));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));


        var audioInterruptionParameter = audioInterruption != null ?
            new ObjectParameter("AudioInterruption", audioInterruption) :
            new ObjectParameter("AudioInterruption", typeof(string));


        var watermarkImageParameter = watermarkImage != null ?
            new ObjectParameter("WatermarkImage", watermarkImage) :
            new ObjectParameter("WatermarkImage", typeof(string));


        var webSiteUrlParameter = webSiteUrl != null ?
            new ObjectParameter("WebSiteUrl", webSiteUrl) :
            new ObjectParameter("WebSiteUrl", typeof(string));


        var recoveryEmailParameter = recoveryEmail != null ?
            new ObjectParameter("RecoveryEmail", recoveryEmail) :
            new ObjectParameter("RecoveryEmail", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBasicAccount", basicUserIDParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, audioInterruptionParameter, watermarkImageParameter, webSiteUrlParameter, recoveryEmailParameter);
    }


    public virtual ObjectResult<sp_SecurityQuestionDetails_Result> sp_SecurityQuestionDetails()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SecurityQuestionDetails_Result>("sp_SecurityQuestionDetails");
    }


    public virtual int sp_updatpremiumaccount(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updatpremiumaccount", usidParameter, isActiveParameter);
    }


    public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string userName, string userPassword)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var userPasswordParameter = userPassword != null ?
            new ObjectParameter("UserPassword", userPassword) :
            new ObjectParameter("UserPassword", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", userNameParameter, userPasswordParameter);
    }


    public virtual int sp_BasicGenerateClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string uploadFileAudioPath, string matrixImagePath, string composer, string publisher, string producer, string selectIntFile, string interruptionStyle, string availableForDownload, string explicitContent, string uploadFileImagePath, string uploadFilePDFPath, string pagePercentage, string watermarkMatrixImagePath, string watermarkMatrixImageText, string videoCategory, string trackingNumber, string videoPath, string rarPath, string totalLength, Nullable<int> catID, string uploadFileAudio2Path)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("userID", userID) :
            new ObjectParameter("userID", typeof(System.Guid));


        var cloneIDParameter = cloneID.HasValue ?
            new ObjectParameter("cloneID", cloneID) :
            new ObjectParameter("cloneID", typeof(System.Guid));


        var titleParameter = title != null ?
            new ObjectParameter("title", title) :
            new ObjectParameter("title", typeof(string));


        var tagsParameter = tags != null ?
            new ObjectParameter("tags", tags) :
            new ObjectParameter("tags", typeof(string));


        var artistNameParameter = artistName != null ?
            new ObjectParameter("artistName", artistName) :
            new ObjectParameter("artistName", typeof(string));


        var albumTitleParameter = albumTitle != null ?
            new ObjectParameter("albumTitle", albumTitle) :
            new ObjectParameter("albumTitle", typeof(string));


        var uploadFileAudioPathParameter = uploadFileAudioPath != null ?
            new ObjectParameter("uploadFileAudioPath", uploadFileAudioPath) :
            new ObjectParameter("uploadFileAudioPath", typeof(string));


        var matrixImagePathParameter = matrixImagePath != null ?
            new ObjectParameter("matrixImagePath", matrixImagePath) :
            new ObjectParameter("matrixImagePath", typeof(string));


        var composerParameter = composer != null ?
            new ObjectParameter("composer", composer) :
            new ObjectParameter("composer", typeof(string));


        var publisherParameter = publisher != null ?
            new ObjectParameter("publisher", publisher) :
            new ObjectParameter("publisher", typeof(string));


        var producerParameter = producer != null ?
            new ObjectParameter("producer", producer) :
            new ObjectParameter("producer", typeof(string));


        var selectIntFileParameter = selectIntFile != null ?
            new ObjectParameter("selectIntFile", selectIntFile) :
            new ObjectParameter("selectIntFile", typeof(string));


        var interruptionStyleParameter = interruptionStyle != null ?
            new ObjectParameter("interruptionStyle", interruptionStyle) :
            new ObjectParameter("interruptionStyle", typeof(string));


        var availableForDownloadParameter = availableForDownload != null ?
            new ObjectParameter("availableForDownload", availableForDownload) :
            new ObjectParameter("availableForDownload", typeof(string));


        var explicitContentParameter = explicitContent != null ?
            new ObjectParameter("explicitContent", explicitContent) :
            new ObjectParameter("explicitContent", typeof(string));


        var uploadFileImagePathParameter = uploadFileImagePath != null ?
            new ObjectParameter("uploadFileImagePath", uploadFileImagePath) :
            new ObjectParameter("uploadFileImagePath", typeof(string));


        var uploadFilePDFPathParameter = uploadFilePDFPath != null ?
            new ObjectParameter("uploadFilePDFPath", uploadFilePDFPath) :
            new ObjectParameter("uploadFilePDFPath", typeof(string));


        var pagePercentageParameter = pagePercentage != null ?
            new ObjectParameter("pagePercentage", pagePercentage) :
            new ObjectParameter("pagePercentage", typeof(string));


        var watermarkMatrixImagePathParameter = watermarkMatrixImagePath != null ?
            new ObjectParameter("watermarkMatrixImagePath", watermarkMatrixImagePath) :
            new ObjectParameter("watermarkMatrixImagePath", typeof(string));


        var watermarkMatrixImageTextParameter = watermarkMatrixImageText != null ?
            new ObjectParameter("watermarkMatrixImageText", watermarkMatrixImageText) :
            new ObjectParameter("watermarkMatrixImageText", typeof(string));


        var videoCategoryParameter = videoCategory != null ?
            new ObjectParameter("videoCategory", videoCategory) :
            new ObjectParameter("videoCategory", typeof(string));


        var trackingNumberParameter = trackingNumber != null ?
            new ObjectParameter("trackingNumber", trackingNumber) :
            new ObjectParameter("trackingNumber", typeof(string));


        var videoPathParameter = videoPath != null ?
            new ObjectParameter("VideoPath", videoPath) :
            new ObjectParameter("VideoPath", typeof(string));


        var rarPathParameter = rarPath != null ?
            new ObjectParameter("RarPath", rarPath) :
            new ObjectParameter("RarPath", typeof(string));


        var totalLengthParameter = totalLength != null ?
            new ObjectParameter("TotalLength", totalLength) :
            new ObjectParameter("TotalLength", typeof(string));


        var catIDParameter = catID.HasValue ?
            new ObjectParameter("CatID", catID) :
            new ObjectParameter("CatID", typeof(int));


        var uploadFileAudio2PathParameter = uploadFileAudio2Path != null ?
            new ObjectParameter("uploadFileAudio2Path", uploadFileAudio2Path) :
            new ObjectParameter("uploadFileAudio2Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BasicGenerateClone", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, uploadFileAudioPathParameter, matrixImagePathParameter, composerParameter, publisherParameter, producerParameter, selectIntFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadFileImagePathParameter, uploadFilePDFPathParameter, pagePercentageParameter, watermarkMatrixImagePathParameter, watermarkMatrixImageTextParameter, videoCategoryParameter, trackingNumberParameter, videoPathParameter, rarPathParameter, totalLengthParameter, catIDParameter, uploadFileAudio2PathParameter);
    }


    public virtual ObjectResult<sp_SecurityQuestionDetails1_Result> sp_SecurityQuestionDetails1()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SecurityQuestionDetails1_Result>("sp_SecurityQuestionDetails1");
    }


    public virtual int sp_UserNameEmailAlreadyExists1(string userName, string emailAddress, ObjectParameter isExists)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserNameEmailAlreadyExists1", userNameParameter, emailAddressParameter, isExists);
    }


    public virtual ObjectResult<GetPost_Result> GetPost()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPost_Result>("GetPost");
    }


    public virtual ObjectResult<PostComment_Result> PostComment(Nullable<int> userId, string userName, string userEmail, string userContact, string userDesignation, string userComment)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("userId", userId) :
            new ObjectParameter("userId", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("userName", userName) :
            new ObjectParameter("userName", typeof(string));


        var userEmailParameter = userEmail != null ?
            new ObjectParameter("userEmail", userEmail) :
            new ObjectParameter("userEmail", typeof(string));


        var userContactParameter = userContact != null ?
            new ObjectParameter("userContact", userContact) :
            new ObjectParameter("userContact", typeof(string));


        var userDesignationParameter = userDesignation != null ?
            new ObjectParameter("userDesignation", userDesignation) :
            new ObjectParameter("userDesignation", typeof(string));


        var userCommentParameter = userComment != null ?
            new ObjectParameter("userComment", userComment) :
            new ObjectParameter("userComment", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PostComment_Result>("PostComment", userIdParameter, userNameParameter, userEmailParameter, userContactParameter, userDesignationParameter, userCommentParameter);
    }


    public virtual ObjectResult<Registeruser_Result> Registeruser(string userName, string userEmail, string userPicture, string socialWebsite)
    {

        var userNameParameter = userName != null ?
            new ObjectParameter("userName", userName) :
            new ObjectParameter("userName", typeof(string));


        var userEmailParameter = userEmail != null ?
            new ObjectParameter("userEmail", userEmail) :
            new ObjectParameter("userEmail", typeof(string));


        var userPictureParameter = userPicture != null ?
            new ObjectParameter("userPicture", userPicture) :
            new ObjectParameter("userPicture", typeof(string));


        var socialWebsiteParameter = socialWebsite != null ?
            new ObjectParameter("socialWebsite", socialWebsite) :
            new ObjectParameter("socialWebsite", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Registeruser_Result>("Registeruser", userNameParameter, userEmailParameter, userPictureParameter, socialWebsiteParameter);
    }


    public virtual ObjectResult<sp_GetAphidTiseAccountInfo_Result> sp_GetAphidTiseAccountInfo(Nullable<System.Guid> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAphidTiseAccountInfo_Result>("sp_GetAphidTiseAccountInfo", userIDParameter);
    }


    public virtual ObjectResult<sp_GetPremiumAccountInfo_Result> sp_GetPremiumAccountInfo(Nullable<System.Guid> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPremiumAccountInfo_Result>("sp_GetPremiumAccountInfo", userIDParameter);
    }


    public virtual ObjectResult<sp_GetByterAccountInfo_Result> sp_GetByterAccountInfo(Nullable<System.Guid> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetByterAccountInfo_Result>("sp_GetByterAccountInfo", userIDParameter);
    }


    public virtual ObjectResult<sp_GetBasicAccountInfo_Result> sp_GetBasicAccountInfo(Nullable<System.Guid> userID)
    {

        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBasicAccountInfo_Result>("sp_GetBasicAccountInfo", userIDParameter);
    }


    public virtual int sp_VerifyByterAccount(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VerifyByterAccount", usidParameter, isActiveParameter);
    }


    public virtual int sp_VerifyAphidLabAccount(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VerifyAphidLabAccount", usidParameter, isActiveParameter);
    }


    public virtual int sp_VerifyPremiumAccount(Nullable<System.Guid> usid, Nullable<bool> isActive)
    {

        var usidParameter = usid.HasValue ?
            new ObjectParameter("usid", usid) :
            new ObjectParameter("usid", typeof(System.Guid));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VerifyPremiumAccount", usidParameter, isActiveParameter);
    }

}

}

