//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AphidTise.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class jobseede_AphidTiseEntities : DbContext
    {
        public jobseede_AphidTiseEntities()
            : base("name=jobseede_AphidTiseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblAphidTiseAccount> tblAphidTiseAccounts { get; set; }
        public DbSet<tblBankAccountDetail> tblBankAccountDetails { get; set; }
        public DbSet<tblBasicAccount> tblBasicAccounts { get; set; }
        public DbSet<tblByterAccount> tblByterAccounts { get; set; }
        public DbSet<tblMasterAccountType> tblMasterAccountTypes { get; set; }
        public DbSet<tblMasterAdsType> tblMasterAdsTypes { get; set; }
        public DbSet<tblMasterCredit> tblMasterCredits { get; set; }
        public DbSet<tblMerchantAccount> tblMerchantAccounts { get; set; }
        public DbSet<tblPersonAddress> tblPersonAddresses { get; set; }
        public DbSet<tblPremiumAccount> tblPremiumAccounts { get; set; }
        public DbSet<tblSecurityQuestion> tblSecurityQuestions { get; set; }
        public DbSet<tblSurveyQuestion> tblSurveyQuestions { get; set; }
        public DbSet<tblUser> tblUsers { get; set; }
        public DbSet<tblVideoInterruption> tblVideoInterruptions { get; set; }
        public DbSet<tblInterruptedBasicAudioFile> tblInterruptedBasicAudioFiles { get; set; }
        public DbSet<tblReleaseUpdate> tblReleaseUpdates { get; set; }
        public DbSet<tblRelease> tblReleases { get; set; }
        public DbSet<tblUserActivation> tblUserActivations { get; set; }
        public DbSet<tblCreateLinkPost> tblCreateLinkPosts { get; set; }
        public DbSet<tblInterruptedFile> tblInterruptedFiles { get; set; }
        public DbSet<tblWaterMarkUpInterruption> tblWaterMarkUpInterruptions { get; set; }
        public DbSet<tblCategory> tblCategories { get; set; }
        public DbSet<tblSocialNetwork> tblSocialNetworks { get; set; }
        public DbSet<tblPremiumGeterateClone> tblPremiumGeterateClones { get; set; }
        public DbSet<tblForgetPassword> tblForgetPasswords { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tblAudioInterruption> tblAudioInterruptions { get; set; }
        public DbSet<tbl_PlayList> tbl_PlayList { get; set; }
        public DbSet<tblBasicGenerateClone> tblBasicGenerateClones { get; set; }
        public DbSet<tblCreditDetail> tblCreditDetails { get; set; }
        public DbSet<tblDataStoragePlan> tblDataStoragePlans { get; set; }
        public DbSet<tblPostingStatu> tblPostingStatus { get; set; }
        public DbSet<tblAd> tblAds { get; set; }
        public DbSet<tblToolFile> tblToolFiles { get; set; }
        public DbSet<tblTool> tblTools { get; set; }
        public DbSet<tblToolsInfo> tblToolsInfoes { get; set; }
    
        public virtual int sp_InsertAds(Nullable<System.Guid> adID, Nullable<System.Guid> userID, string companyLogo, string title, string adInformation, Nullable<System.DateTime> adCycleFromDate, Nullable<System.DateTime> adCycleToDate, Nullable<int> adTypeID, string adPicture, string adVideo, string adHyperLinkUrl, Nullable<decimal> priceToDisplay, Nullable<int> creditsID, Nullable<System.Guid> surveyID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
        {
            var adIDParameter = adID.HasValue ?
                new ObjectParameter("AdID", adID) :
                new ObjectParameter("AdID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var adInformationParameter = adInformation != null ?
                new ObjectParameter("AdInformation", adInformation) :
                new ObjectParameter("AdInformation", typeof(string));
    
            var adCycleFromDateParameter = adCycleFromDate.HasValue ?
                new ObjectParameter("AdCycleFromDate", adCycleFromDate) :
                new ObjectParameter("AdCycleFromDate", typeof(System.DateTime));
    
            var adCycleToDateParameter = adCycleToDate.HasValue ?
                new ObjectParameter("AdCycleToDate", adCycleToDate) :
                new ObjectParameter("AdCycleToDate", typeof(System.DateTime));
    
            var adTypeIDParameter = adTypeID.HasValue ?
                new ObjectParameter("AdTypeID", adTypeID) :
                new ObjectParameter("AdTypeID", typeof(int));
    
            var adPictureParameter = adPicture != null ?
                new ObjectParameter("AdPicture", adPicture) :
                new ObjectParameter("AdPicture", typeof(string));
    
            var adVideoParameter = adVideo != null ?
                new ObjectParameter("AdVideo", adVideo) :
                new ObjectParameter("AdVideo", typeof(string));
    
            var adHyperLinkUrlParameter = adHyperLinkUrl != null ?
                new ObjectParameter("AdHyperLinkUrl", adHyperLinkUrl) :
                new ObjectParameter("AdHyperLinkUrl", typeof(string));
    
            var priceToDisplayParameter = priceToDisplay.HasValue ?
                new ObjectParameter("PriceToDisplay", priceToDisplay) :
                new ObjectParameter("PriceToDisplay", typeof(decimal));
    
            var creditsIDParameter = creditsID.HasValue ?
                new ObjectParameter("CreditsID", creditsID) :
                new ObjectParameter("CreditsID", typeof(int));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(System.Guid));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAds", adIDParameter, userIDParameter, companyLogoParameter, titleParameter, adInformationParameter, adCycleFromDateParameter, adCycleToDateParameter, adTypeIDParameter, adPictureParameter, adVideoParameter, adHyperLinkUrlParameter, priceToDisplayParameter, creditsIDParameter, surveyIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
        }
    
        public virtual int sp_InsertAphidTiseRegstration(Nullable<System.Guid> aphidTiseUserID, byte[] companyLogo, string companyName, string password, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, Nullable<System.Guid> bankAccountID, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete, string informations, string website, string productService)
        {
            var aphidTiseUserIDParameter = aphidTiseUserID.HasValue ?
                new ObjectParameter("AphidTiseUserID", aphidTiseUserID) :
                new ObjectParameter("AphidTiseUserID", typeof(System.Guid));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(byte[]));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var informationsParameter = informations != null ?
                new ObjectParameter("Informations", informations) :
                new ObjectParameter("Informations", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var productServiceParameter = productService != null ?
                new ObjectParameter("ProductService", productService) :
                new ObjectParameter("ProductService", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAphidTiseRegstration", aphidTiseUserIDParameter, companyLogoParameter, companyNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, bankAccountIDParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter, informationsParameter, websiteParameter, productServiceParameter);
        }
    
        public virtual int sp_InsertBankAccountDetails(Nullable<System.Guid> bankAccountID, Nullable<long> cradNumber, Nullable<short> expiryMonth, Nullable<int> expiryYear, string cSV, string nameOnCard)
        {
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var cradNumberParameter = cradNumber.HasValue ?
                new ObjectParameter("CradNumber", cradNumber) :
                new ObjectParameter("CradNumber", typeof(long));
    
            var expiryMonthParameter = expiryMonth.HasValue ?
                new ObjectParameter("ExpiryMonth", expiryMonth) :
                new ObjectParameter("ExpiryMonth", typeof(short));
    
            var expiryYearParameter = expiryYear.HasValue ?
                new ObjectParameter("ExpiryYear", expiryYear) :
                new ObjectParameter("ExpiryYear", typeof(int));
    
            var cSVParameter = cSV != null ?
                new ObjectParameter("CSV", cSV) :
                new ObjectParameter("CSV", typeof(string));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBankAccountDetails", bankAccountIDParameter, cradNumberParameter, expiryMonthParameter, expiryYearParameter, cSVParameter, nameOnCardParameter);
        }
    
        public virtual int sp_InsertBasicAccount(Nullable<System.Guid> basicUserID, string userName, string password, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, byte[] audioInterruptionFile, byte[] watermarks, byte[] profilePicture, string webSiteUrl, Nullable<System.Guid> bankAccountID, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
        {
            var basicUserIDParameter = basicUserID.HasValue ?
                new ObjectParameter("BasicUserID", basicUserID) :
                new ObjectParameter("BasicUserID", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var audioInterruptionFileParameter = audioInterruptionFile != null ?
                new ObjectParameter("AudioInterruptionFile", audioInterruptionFile) :
                new ObjectParameter("AudioInterruptionFile", typeof(byte[]));
    
            var watermarksParameter = watermarks != null ?
                new ObjectParameter("Watermarks", watermarks) :
                new ObjectParameter("Watermarks", typeof(byte[]));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(byte[]));
    
            var webSiteUrlParameter = webSiteUrl != null ?
                new ObjectParameter("WebSiteUrl", webSiteUrl) :
                new ObjectParameter("WebSiteUrl", typeof(string));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBasicAccount", basicUserIDParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, audioInterruptionFileParameter, watermarksParameter, profilePictureParameter, webSiteUrlParameter, bankAccountIDParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
        }
    
        public virtual int sp_InsertByterAccount(Nullable<System.Guid> byterUserID, string userName, string password, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, byte[] profilePicture, string recoveryEmail, Nullable<System.Guid> bankAccountID, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
        {
            var byterUserIDParameter = byterUserID.HasValue ?
                new ObjectParameter("ByterUserID", byterUserID) :
                new ObjectParameter("ByterUserID", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(byte[]));
    
            var recoveryEmailParameter = recoveryEmail != null ?
                new ObjectParameter("RecoveryEmail", recoveryEmail) :
                new ObjectParameter("RecoveryEmail", typeof(string));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertByterAccount", byterUserIDParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, profilePictureParameter, recoveryEmailParameter, bankAccountIDParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
        }
    
        public virtual int sp_InsertMasterAccountType(string accountTypeName)
        {
            var accountTypeNameParameter = accountTypeName != null ?
                new ObjectParameter("AccountTypeName", accountTypeName) :
                new ObjectParameter("AccountTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterAccountType", accountTypeNameParameter);
        }
    
        public virtual int sp_InsertMasterCredits(string creditsPoint)
        {
            var creditsPointParameter = creditsPoint != null ?
                new ObjectParameter("CreditsPoint", creditsPoint) :
                new ObjectParameter("CreditsPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMasterCredits", creditsPointParameter);
        }
    
        public virtual int sp_InsertPersonAddress(Nullable<System.Guid> addressID, string addressLine1, string addressLine2, string city, string region, Nullable<int> postalCode)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode.HasValue ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPersonAddress", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, regionParameter, postalCodeParameter);
        }
    
        public virtual int sp_InsertPremiumAccount(Nullable<System.Guid> premiumUserID, string composerName, string password, byte[] profileImage, string firstName, string lastName, string biography, string website, string emailAddress, string phone, Nullable<System.Guid> bankAccountID, Nullable<System.Guid> addressID, Nullable<System.Guid> securityQuestionID, Nullable<int> accountTypeID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifyDate, Nullable<bool> isDelete)
        {
            var premiumUserIDParameter = premiumUserID.HasValue ?
                new ObjectParameter("PremiumUserID", premiumUserID) :
                new ObjectParameter("PremiumUserID", typeof(System.Guid));
    
            var composerNameParameter = composerName != null ?
                new ObjectParameter("ComposerName", composerName) :
                new ObjectParameter("ComposerName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var biographyParameter = biography != null ?
                new ObjectParameter("Biography", biography) :
                new ObjectParameter("Biography", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var modifyDateParameter = modifyDate.HasValue ?
                new ObjectParameter("ModifyDate", modifyDate) :
                new ObjectParameter("ModifyDate", typeof(System.DateTime));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPremiumAccount", premiumUserIDParameter, composerNameParameter, passwordParameter, profileImageParameter, firstNameParameter, lastNameParameter, biographyParameter, websiteParameter, emailAddressParameter, phoneParameter, bankAccountIDParameter, addressIDParameter, securityQuestionIDParameter, accountTypeIDParameter, createDateParameter, modifyDateParameter, isDeleteParameter);
        }
    
        public virtual int sp_InsertSecurityQuestions(Nullable<System.Guid> securityQuestionID, string securityQuestion1, string answer1, string securityQuestion2, string answer2)
        {
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var securityQuestion1Parameter = securityQuestion1 != null ?
                new ObjectParameter("SecurityQuestion1", securityQuestion1) :
                new ObjectParameter("SecurityQuestion1", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("Answer1", answer1) :
                new ObjectParameter("Answer1", typeof(string));
    
            var securityQuestion2Parameter = securityQuestion2 != null ?
                new ObjectParameter("SecurityQuestion2", securityQuestion2) :
                new ObjectParameter("SecurityQuestion2", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("Answer2", answer2) :
                new ObjectParameter("Answer2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSecurityQuestions", securityQuestionIDParameter, securityQuestion1Parameter, answer1Parameter, securityQuestion2Parameter, answer2Parameter);
        }
    
        public virtual int sp_InsertSurveyQuestion(Nullable<System.Guid> surveyID, string question, string option1, string option2, string option3, string option4, string option5, string option6, string option7, string option8)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(System.Guid));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var option5Parameter = option5 != null ?
                new ObjectParameter("Option5", option5) :
                new ObjectParameter("Option5", typeof(string));
    
            var option6Parameter = option6 != null ?
                new ObjectParameter("Option6", option6) :
                new ObjectParameter("Option6", typeof(string));
    
            var option7Parameter = option7 != null ?
                new ObjectParameter("Option7", option7) :
                new ObjectParameter("Option7", typeof(string));
    
            var option8Parameter = option8 != null ?
                new ObjectParameter("Option8", option8) :
                new ObjectParameter("Option8", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertSurveyQuestion", surveyIDParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, option5Parameter, option6Parameter, option7Parameter, option8Parameter);
        }
    
        public virtual int sp_InsertUsers(Nullable<System.Guid> userId, string userName, string userPassword, Nullable<bool> userStatus, Nullable<int> accountTypeID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userStatusParameter = userStatus.HasValue ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(bool));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUsers", userIdParameter, userNameParameter, userPasswordParameter, userStatusParameter, accountTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string userName, string userPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", userNameParameter, userPasswordParameter);
        }
    
        public virtual ObjectResult<sp_GetAphidTiseAccountInfo_Result> sp_GetAphidTiseAccountInfo(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAphidTiseAccountInfo_Result>("sp_GetAphidTiseAccountInfo", userIDParameter);
        }
    
        public virtual int sp_UpdateAphidTiseAccount(byte[] companyLogo, string companyName, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, string informations, string website, string productService, Nullable<System.Guid> original_AphidTiseUserID)
        {
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(byte[]));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var informationsParameter = informations != null ?
                new ObjectParameter("Informations", informations) :
                new ObjectParameter("Informations", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var productServiceParameter = productService != null ?
                new ObjectParameter("ProductService", productService) :
                new ObjectParameter("ProductService", typeof(string));
    
            var original_AphidTiseUserIDParameter = original_AphidTiseUserID.HasValue ?
                new ObjectParameter("Original_AphidTiseUserID", original_AphidTiseUserID) :
                new ObjectParameter("Original_AphidTiseUserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAphidTiseAccount", companyLogoParameter, companyNameParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, informationsParameter, websiteParameter, productServiceParameter, original_AphidTiseUserIDParameter);
        }
    
        public virtual int sp_UpdateBankAccountDetails(Nullable<System.Guid> bankAccountID, Nullable<long> cradNumber, Nullable<short> expiryMonth, Nullable<int> expiryYear, string cSV, string nameOnCard)
        {
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(System.Guid));
    
            var cradNumberParameter = cradNumber.HasValue ?
                new ObjectParameter("CradNumber", cradNumber) :
                new ObjectParameter("CradNumber", typeof(long));
    
            var expiryMonthParameter = expiryMonth.HasValue ?
                new ObjectParameter("ExpiryMonth", expiryMonth) :
                new ObjectParameter("ExpiryMonth", typeof(short));
    
            var expiryYearParameter = expiryYear.HasValue ?
                new ObjectParameter("ExpiryYear", expiryYear) :
                new ObjectParameter("ExpiryYear", typeof(int));
    
            var cSVParameter = cSV != null ?
                new ObjectParameter("CSV", cSV) :
                new ObjectParameter("CSV", typeof(string));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBankAccountDetails", bankAccountIDParameter, cradNumberParameter, expiryMonthParameter, expiryYearParameter, cSVParameter, nameOnCardParameter);
        }
    
        public virtual int sp_UpdatePersonAddress(Nullable<System.Guid> addressID, string addressLine1, string addressLine2, string city, string region, Nullable<int> postalCode)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(System.Guid));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode.HasValue ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePersonAddress", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, regionParameter, postalCodeParameter);
        }
    
        public virtual int sp_UpdateSecurityQuestions(Nullable<System.Guid> securityQuestionID, string securityQuestion1, string answer1, string securityQuestion2, string answer2)
        {
            var securityQuestionIDParameter = securityQuestionID.HasValue ?
                new ObjectParameter("SecurityQuestionID", securityQuestionID) :
                new ObjectParameter("SecurityQuestionID", typeof(System.Guid));
    
            var securityQuestion1Parameter = securityQuestion1 != null ?
                new ObjectParameter("SecurityQuestion1", securityQuestion1) :
                new ObjectParameter("SecurityQuestion1", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("Answer1", answer1) :
                new ObjectParameter("Answer1", typeof(string));
    
            var securityQuestion2Parameter = securityQuestion2 != null ?
                new ObjectParameter("SecurityQuestion2", securityQuestion2) :
                new ObjectParameter("SecurityQuestion2", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("Answer2", answer2) :
                new ObjectParameter("Answer2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSecurityQuestions", securityQuestionIDParameter, securityQuestion1Parameter, answer1Parameter, securityQuestion2Parameter, answer2Parameter);
        }
    
        public virtual int sp_UpdateSurveyQuestion(Nullable<System.Guid> surveyID, string question, string option1, string option2, string option3, string option4, string option5, string option6, string option7, string option8)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(System.Guid));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var option5Parameter = option5 != null ?
                new ObjectParameter("Option5", option5) :
                new ObjectParameter("Option5", typeof(string));
    
            var option6Parameter = option6 != null ?
                new ObjectParameter("Option6", option6) :
                new ObjectParameter("Option6", typeof(string));
    
            var option7Parameter = option7 != null ?
                new ObjectParameter("Option7", option7) :
                new ObjectParameter("Option7", typeof(string));
    
            var option8Parameter = option8 != null ?
                new ObjectParameter("Option8", option8) :
                new ObjectParameter("Option8", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSurveyQuestion", surveyIDParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, option5Parameter, option6Parameter, option7Parameter, option8Parameter);
        }
    
        public virtual int sp_UpdateBasicAccount(Nullable<System.Guid> basicUserID, string userName, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, byte[] profilePicture, string webSiteUrl, string recoveryEmail)
        {
            var basicUserIDParameter = basicUserID.HasValue ?
                new ObjectParameter("BasicUserID", basicUserID) :
                new ObjectParameter("BasicUserID", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(byte[]));
    
            var webSiteUrlParameter = webSiteUrl != null ?
                new ObjectParameter("WebSiteUrl", webSiteUrl) :
                new ObjectParameter("WebSiteUrl", typeof(string));
    
            var recoveryEmailParameter = recoveryEmail != null ?
                new ObjectParameter("RecoveryEmail", recoveryEmail) :
                new ObjectParameter("RecoveryEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBasicAccount", basicUserIDParameter, userNameParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, profilePictureParameter, webSiteUrlParameter, recoveryEmailParameter);
        }
    
        public virtual int sp_UpdateByterAccount(Nullable<System.Guid> userID, string userName, string firstName, string lastName, string emailAddress, Nullable<System.DateTime> dOB, string phone, byte[] profilePicture, string recoveryEmail)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(byte[]));
    
            var recoveryEmailParameter = recoveryEmail != null ?
                new ObjectParameter("RecoveryEmail", recoveryEmail) :
                new ObjectParameter("RecoveryEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateByterAccount", userIDParameter, userNameParameter, firstNameParameter, lastNameParameter, emailAddressParameter, dOBParameter, phoneParameter, profilePictureParameter, recoveryEmailParameter);
        }
    
        public virtual int sp_UpdatePremiumAccount(Nullable<System.Guid> premiumUserID, string composerName, byte[] profileImage, string firstName, string lastName, Nullable<System.DateTime> dOB, string biography, string website, string emailAddress, string recoveryEmail, string phone)
        {
            var premiumUserIDParameter = premiumUserID.HasValue ?
                new ObjectParameter("PremiumUserID", premiumUserID) :
                new ObjectParameter("PremiumUserID", typeof(System.Guid));
    
            var composerNameParameter = composerName != null ?
                new ObjectParameter("ComposerName", composerName) :
                new ObjectParameter("ComposerName", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var biographyParameter = biography != null ?
                new ObjectParameter("Biography", biography) :
                new ObjectParameter("Biography", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var recoveryEmailParameter = recoveryEmail != null ?
                new ObjectParameter("RecoveryEmail", recoveryEmail) :
                new ObjectParameter("RecoveryEmail", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePremiumAccount", premiumUserIDParameter, composerNameParameter, profileImageParameter, firstNameParameter, lastNameParameter, dOBParameter, biographyParameter, websiteParameter, emailAddressParameter, recoveryEmailParameter, phoneParameter);
        }
    
        public virtual int sp_UpdateUsers(Nullable<System.Guid> userId, string userName, string userPassword, Nullable<bool> userStatus, Nullable<int> accountTypeID, Nullable<System.Guid> original_UserId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userStatusParameter = userStatus.HasValue ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(bool));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var original_UserIdParameter = original_UserId.HasValue ?
                new ObjectParameter("Original_UserId", original_UserId) :
                new ObjectParameter("Original_UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUsers", userIdParameter, userNameParameter, userPasswordParameter, userStatusParameter, accountTypeIDParameter, original_UserIdParameter);
        }
    
        public virtual ObjectResult<sp_GetBasicAccountInfo_Result> sp_GetBasicAccountInfo(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBasicAccountInfo_Result>("sp_GetBasicAccountInfo", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetByterAccountInfo_Result> sp_GetByterAccountInfo(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetByterAccountInfo_Result>("sp_GetByterAccountInfo", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPremiumAccountInfo_Result> sp_GetPremiumAccountInfo(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPremiumAccountInfo_Result>("sp_GetPremiumAccountInfo", userIDParameter);
        }
    
        public virtual int sp_InsertUpdateAudioInteruptionFile(Nullable<System.Guid> userId, string audioInterruptionFileName, string fileName, Nullable<bool> isActive, ObjectParameter id, Nullable<int> flag, string imagename)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var audioInterruptionFileNameParameter = audioInterruptionFileName != null ?
                new ObjectParameter("AudioInterruptionFileName", audioInterruptionFileName) :
                new ObjectParameter("AudioInterruptionFileName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var imagenameParameter = imagename != null ?
                new ObjectParameter("imagename", imagename) :
                new ObjectParameter("imagename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateAudioInteruptionFile", userIdParameter, audioInterruptionFileNameParameter, fileNameParameter, isActiveParameter, id, flagParameter, imagenameParameter);
        }
    
        public virtual int sp_InsertUpdateImageInteruptionFile(Nullable<System.Guid> userId, string imageInterruption, string watermarkImageName, Nullable<bool> isActive, ObjectParameter id, Nullable<int> flag, string imagename)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var imageInterruptionParameter = imageInterruption != null ?
                new ObjectParameter("ImageInterruption", imageInterruption) :
                new ObjectParameter("ImageInterruption", typeof(string));
    
            var watermarkImageNameParameter = watermarkImageName != null ?
                new ObjectParameter("WatermarkImageName", watermarkImageName) :
                new ObjectParameter("WatermarkImageName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var imagenameParameter = imagename != null ?
                new ObjectParameter("imagename", imagename) :
                new ObjectParameter("imagename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateImageInteruptionFile", userIdParameter, imageInterruptionParameter, watermarkImageNameParameter, isActiveParameter, id, flagParameter, imagenameParameter);
        }
    
        public virtual int sp_InsertUpdateVideoInteruptionFile(Nullable<System.Guid> userId, byte[] videoFile)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var videoFileParameter = videoFile != null ?
                new ObjectParameter("VideoFile", videoFile) :
                new ObjectParameter("VideoFile", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateVideoInteruptionFile", userIdParameter, videoFileParameter);
        }
    
        public virtual ObjectResult<sp_GetAudioInterruption_Result> sp_GetAudioInterruption(Nullable<System.Guid> userID, Nullable<int> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAudioInterruption_Result>("sp_GetAudioInterruption", userIDParameter, flagParameter);
        }
    
        public virtual int sp_PremiumGenerateClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string audioFilePath, string imageFile, string composerName, string producer, string publisher, string selectedInterruptionFile, string interruptionStyle, string availableForDownload, string explicitContent, string type, string pDFFilePath, string videoFilePath, string pagePercentage, string rARFilePAth, string matrixImagePath, string creatorName, string trackingNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var cloneIDParameter = cloneID.HasValue ?
                new ObjectParameter("CloneID", cloneID) :
                new ObjectParameter("CloneID", typeof(System.Guid));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("Tags", tags) :
                new ObjectParameter("Tags", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("ArtistName", artistName) :
                new ObjectParameter("ArtistName", typeof(string));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("AlbumTitle", albumTitle) :
                new ObjectParameter("AlbumTitle", typeof(string));
    
            var audioFilePathParameter = audioFilePath != null ?
                new ObjectParameter("AudioFilePath", audioFilePath) :
                new ObjectParameter("AudioFilePath", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("ImageFile", imageFile) :
                new ObjectParameter("ImageFile", typeof(string));
    
            var composerNameParameter = composerName != null ?
                new ObjectParameter("ComposerName", composerName) :
                new ObjectParameter("ComposerName", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var selectedInterruptionFileParameter = selectedInterruptionFile != null ?
                new ObjectParameter("SelectedInterruptionFile", selectedInterruptionFile) :
                new ObjectParameter("SelectedInterruptionFile", typeof(string));
    
            var interruptionStyleParameter = interruptionStyle != null ?
                new ObjectParameter("InterruptionStyle", interruptionStyle) :
                new ObjectParameter("InterruptionStyle", typeof(string));
    
            var availableForDownloadParameter = availableForDownload != null ?
                new ObjectParameter("AvailableForDownload", availableForDownload) :
                new ObjectParameter("AvailableForDownload", typeof(string));
    
            var explicitContentParameter = explicitContent != null ?
                new ObjectParameter("ExplicitContent", explicitContent) :
                new ObjectParameter("ExplicitContent", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pDFFilePathParameter = pDFFilePath != null ?
                new ObjectParameter("PDFFilePath", pDFFilePath) :
                new ObjectParameter("PDFFilePath", typeof(string));
    
            var videoFilePathParameter = videoFilePath != null ?
                new ObjectParameter("VideoFilePath", videoFilePath) :
                new ObjectParameter("VideoFilePath", typeof(string));
    
            var pagePercentageParameter = pagePercentage != null ?
                new ObjectParameter("PagePercentage", pagePercentage) :
                new ObjectParameter("PagePercentage", typeof(string));
    
            var rARFilePAthParameter = rARFilePAth != null ?
                new ObjectParameter("RARFilePAth", rARFilePAth) :
                new ObjectParameter("RARFilePAth", typeof(string));
    
            var matrixImagePathParameter = matrixImagePath != null ?
                new ObjectParameter("MatrixImagePath", matrixImagePath) :
                new ObjectParameter("MatrixImagePath", typeof(string));
    
            var creatorNameParameter = creatorName != null ?
                new ObjectParameter("CreatorName", creatorName) :
                new ObjectParameter("CreatorName", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PremiumGenerateClone", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, imageFileParameter, composerNameParameter, producerParameter, publisherParameter, selectedInterruptionFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, typeParameter, pDFFilePathParameter, videoFilePathParameter, pagePercentageParameter, rARFilePAthParameter, matrixImagePathParameter, creatorNameParameter, trackingNumberParameter);
        }
    
        public virtual int sp_BasicGenerateClone(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string uploadFileAudioPath, string matrixImagePath, string composer, string publisher, string producer, string selectIntFile, string interruptionStyle, string availableForDownload, string explicitContent, string uploadFileImagePath, string uploadFilePDFPath, string pagePercentage, string watermarkMatrixImagePath, string watermarkMatrixImageText, string videoCategory, string trackingNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var cloneIDParameter = cloneID.HasValue ?
                new ObjectParameter("cloneID", cloneID) :
                new ObjectParameter("cloneID", typeof(System.Guid));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("tags", tags) :
                new ObjectParameter("tags", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            var uploadFileAudioPathParameter = uploadFileAudioPath != null ?
                new ObjectParameter("uploadFileAudioPath", uploadFileAudioPath) :
                new ObjectParameter("uploadFileAudioPath", typeof(string));
    
            var matrixImagePathParameter = matrixImagePath != null ?
                new ObjectParameter("matrixImagePath", matrixImagePath) :
                new ObjectParameter("matrixImagePath", typeof(string));
    
            var composerParameter = composer != null ?
                new ObjectParameter("composer", composer) :
                new ObjectParameter("composer", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("publisher", publisher) :
                new ObjectParameter("publisher", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("producer", producer) :
                new ObjectParameter("producer", typeof(string));
    
            var selectIntFileParameter = selectIntFile != null ?
                new ObjectParameter("selectIntFile", selectIntFile) :
                new ObjectParameter("selectIntFile", typeof(string));
    
            var interruptionStyleParameter = interruptionStyle != null ?
                new ObjectParameter("interruptionStyle", interruptionStyle) :
                new ObjectParameter("interruptionStyle", typeof(string));
    
            var availableForDownloadParameter = availableForDownload != null ?
                new ObjectParameter("availableForDownload", availableForDownload) :
                new ObjectParameter("availableForDownload", typeof(string));
    
            var explicitContentParameter = explicitContent != null ?
                new ObjectParameter("explicitContent", explicitContent) :
                new ObjectParameter("explicitContent", typeof(string));
    
            var uploadFileImagePathParameter = uploadFileImagePath != null ?
                new ObjectParameter("uploadFileImagePath", uploadFileImagePath) :
                new ObjectParameter("uploadFileImagePath", typeof(string));
    
            var uploadFilePDFPathParameter = uploadFilePDFPath != null ?
                new ObjectParameter("uploadFilePDFPath", uploadFilePDFPath) :
                new ObjectParameter("uploadFilePDFPath", typeof(string));
    
            var pagePercentageParameter = pagePercentage != null ?
                new ObjectParameter("pagePercentage", pagePercentage) :
                new ObjectParameter("pagePercentage", typeof(string));
    
            var watermarkMatrixImagePathParameter = watermarkMatrixImagePath != null ?
                new ObjectParameter("watermarkMatrixImagePath", watermarkMatrixImagePath) :
                new ObjectParameter("watermarkMatrixImagePath", typeof(string));
    
            var watermarkMatrixImageTextParameter = watermarkMatrixImageText != null ?
                new ObjectParameter("watermarkMatrixImageText", watermarkMatrixImageText) :
                new ObjectParameter("watermarkMatrixImageText", typeof(string));
    
            var videoCategoryParameter = videoCategory != null ?
                new ObjectParameter("videoCategory", videoCategory) :
                new ObjectParameter("videoCategory", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("trackingNumber", trackingNumber) :
                new ObjectParameter("trackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BasicGenerateClone", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, uploadFileAudioPathParameter, matrixImagePathParameter, composerParameter, publisherParameter, producerParameter, selectIntFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadFileImagePathParameter, uploadFilePDFPathParameter, pagePercentageParameter, watermarkMatrixImagePathParameter, watermarkMatrixImageTextParameter, videoCategoryParameter, trackingNumberParameter);
        }
    
        public virtual int sp_InsertBasicInterruptedAudio(Nullable<System.Guid> cloneID, string songName, byte[] interruptedByte, string type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive)
        {
            var cloneIDParameter = cloneID.HasValue ?
                new ObjectParameter("CloneID", cloneID) :
                new ObjectParameter("CloneID", typeof(System.Guid));
    
            var songNameParameter = songName != null ?
                new ObjectParameter("SongName", songName) :
                new ObjectParameter("SongName", typeof(string));
    
            var interruptedByteParameter = interruptedByte != null ?
                new ObjectParameter("InterruptedByte", interruptedByte) :
                new ObjectParameter("InterruptedByte", typeof(byte[]));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBasicInterruptedAudio", cloneIDParameter, songNameParameter, interruptedByteParameter, typeParameter, createdDateParameter, modifiedDateParameter, isActiveParameter);
        }
    
        public virtual int sp_Release(Nullable<int> releaseId, string message, string imagePath)
        {
            var releaseIdParameter = releaseId.HasValue ?
                new ObjectParameter("ReleaseId", releaseId) :
                new ObjectParameter("ReleaseId", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Release", releaseIdParameter, messageParameter, imagePathParameter);
        }
    
        public virtual ObjectResult<sp_GetReleaseData_Result> sp_GetReleaseData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReleaseData_Result>("sp_GetReleaseData");
        }
    
        public virtual int sp_UserActivation(Nullable<System.Guid> userId, Nullable<System.Guid> tokenId, string userName, Nullable<bool> status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var tokenIdParameter = tokenId.HasValue ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserActivation", userIdParameter, tokenIdParameter, userNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_VerifyUser_Result> sp_VerifyUser(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VerifyUser_Result>("sp_VerifyUser", tokenParameter);
        }
    
        public virtual ObjectResult<sp_ActivateUser_Result> sp_ActivateUser(string token, Nullable<int> flag, string username)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActivateUser_Result>("sp_ActivateUser", tokenParameter, flagParameter, usernameParameter);
        }
    
        public virtual ObjectResult<sp_GetUserStatus_Result> sp_GetUserStatus(string user, string pass)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserStatus_Result>("sp_GetUserStatus", userParameter, passParameter);
        }
    
        public virtual int sp_ChangePassword(string userid, string pass)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangePassword", useridParameter, passParameter);
        }
    
        public virtual int sp_CreateLinkPost(string title, string channel, Nullable<int> noOfClones, Nullable<int> views, Nullable<int> downloads, string fileSize, string trackingNo, Nullable<System.DateTime> postedDate, string category, Nullable<System.Guid> userId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var channelParameter = channel != null ?
                new ObjectParameter("Channel", channel) :
                new ObjectParameter("Channel", typeof(string));
    
            var noOfClonesParameter = noOfClones.HasValue ?
                new ObjectParameter("NoOfClones", noOfClones) :
                new ObjectParameter("NoOfClones", typeof(int));
    
            var viewsParameter = views.HasValue ?
                new ObjectParameter("Views", views) :
                new ObjectParameter("Views", typeof(int));
    
            var downloadsParameter = downloads.HasValue ?
                new ObjectParameter("Downloads", downloads) :
                new ObjectParameter("Downloads", typeof(int));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var postedDateParameter = postedDate.HasValue ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateLinkPost", titleParameter, channelParameter, noOfClonesParameter, viewsParameter, downloadsParameter, fileSizeParameter, trackingNoParameter, postedDateParameter, categoryParameter, userIdParameter);
        }
    
        public virtual int sp_InterruptedFiles(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string interruptFilePath, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive, string fileName, string videoPath, string trackingNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var cloneIdParameter = cloneId.HasValue ?
                new ObjectParameter("CloneId", cloneId) :
                new ObjectParameter("CloneId", typeof(System.Guid));
    
            var interruptFilePathParameter = interruptFilePath != null ?
                new ObjectParameter("InterruptFilePath", interruptFilePath) :
                new ObjectParameter("InterruptFilePath", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var videoPathParameter = videoPath != null ?
                new ObjectParameter("VideoPath", videoPath) :
                new ObjectParameter("VideoPath", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InterruptedFiles", userIDParameter, cloneIdParameter, interruptFilePathParameter, createdDateParameter, modifiedDateParameter, isActiveParameter, fileNameParameter, videoPathParameter, trackingNumberParameter);
        }
    
        public virtual ObjectResult<sp_GetPostData_Result> sp_GetPostData(Nullable<System.Guid> username)
        {
            var usernameParameter = username.HasValue ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPostData_Result>("sp_GetPostData", usernameParameter);
        }
    
        public virtual ObjectResult<sp_Sorting_Result> sp_Sorting(string category, Nullable<System.Guid> userId, string flag)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sorting_Result>("sp_Sorting", categoryParameter, userIdParameter, flagParameter);
        }
    
        public virtual int sp_SearchCreateLinkPost(Nullable<System.Guid> userId, string title, string category)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SearchCreateLinkPost", userIdParameter, titleParameter, categoryParameter);
        }
    
        public virtual int sp_EditBasicCloneModel(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditBasicCloneModel", trackingNoParameter);
        }
    
        public virtual ObjectResult<sp_EditBasicCloneModel1_Result> sp_EditBasicCloneModel1(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditBasicCloneModel1_Result>("sp_EditBasicCloneModel1", trackingNoParameter);
        }
    
        public virtual ObjectResult<sp_EditBasicCloneModel2_Result> sp_EditBasicCloneModel2(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditBasicCloneModel2_Result>("sp_EditBasicCloneModel2", trackingNoParameter);
        }
    
        public virtual int sp_UpdateBasicCloneModel(Nullable<System.Guid> userID, string title, string tags, string artistName, string albumTitle, string uploadFileAudioPath, string matrixImagePath, string composer, string publisher, string producer, string selectIntFile, string interruptionStyle, string availableForDownload, string explicitContent, string uploadFileImagePath, string uploadFilePDFPath, string pagePercentage, string watermarkMatrixImagePath, string watermarkMatrixImageText, string videoCategory, string trackingNumber, string flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("Tags", tags) :
                new ObjectParameter("Tags", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("ArtistName", artistName) :
                new ObjectParameter("ArtistName", typeof(string));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("AlbumTitle", albumTitle) :
                new ObjectParameter("AlbumTitle", typeof(string));
    
            var uploadFileAudioPathParameter = uploadFileAudioPath != null ?
                new ObjectParameter("UploadFileAudioPath", uploadFileAudioPath) :
                new ObjectParameter("UploadFileAudioPath", typeof(string));
    
            var matrixImagePathParameter = matrixImagePath != null ?
                new ObjectParameter("MatrixImagePath", matrixImagePath) :
                new ObjectParameter("MatrixImagePath", typeof(string));
    
            var composerParameter = composer != null ?
                new ObjectParameter("Composer", composer) :
                new ObjectParameter("Composer", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var selectIntFileParameter = selectIntFile != null ?
                new ObjectParameter("SelectIntFile", selectIntFile) :
                new ObjectParameter("SelectIntFile", typeof(string));
    
            var interruptionStyleParameter = interruptionStyle != null ?
                new ObjectParameter("InterruptionStyle", interruptionStyle) :
                new ObjectParameter("InterruptionStyle", typeof(string));
    
            var availableForDownloadParameter = availableForDownload != null ?
                new ObjectParameter("AvailableForDownload", availableForDownload) :
                new ObjectParameter("AvailableForDownload", typeof(string));
    
            var explicitContentParameter = explicitContent != null ?
                new ObjectParameter("ExplicitContent", explicitContent) :
                new ObjectParameter("ExplicitContent", typeof(string));
    
            var uploadFileImagePathParameter = uploadFileImagePath != null ?
                new ObjectParameter("UploadFileImagePath", uploadFileImagePath) :
                new ObjectParameter("UploadFileImagePath", typeof(string));
    
            var uploadFilePDFPathParameter = uploadFilePDFPath != null ?
                new ObjectParameter("UploadFilePDFPath", uploadFilePDFPath) :
                new ObjectParameter("UploadFilePDFPath", typeof(string));
    
            var pagePercentageParameter = pagePercentage != null ?
                new ObjectParameter("PagePercentage", pagePercentage) :
                new ObjectParameter("PagePercentage", typeof(string));
    
            var watermarkMatrixImagePathParameter = watermarkMatrixImagePath != null ?
                new ObjectParameter("WatermarkMatrixImagePath", watermarkMatrixImagePath) :
                new ObjectParameter("WatermarkMatrixImagePath", typeof(string));
    
            var watermarkMatrixImageTextParameter = watermarkMatrixImageText != null ?
                new ObjectParameter("WatermarkMatrixImageText", watermarkMatrixImageText) :
                new ObjectParameter("WatermarkMatrixImageText", typeof(string));
    
            var videoCategoryParameter = videoCategory != null ?
                new ObjectParameter("VideoCategory", videoCategory) :
                new ObjectParameter("VideoCategory", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBasicCloneModel", userIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, uploadFileAudioPathParameter, matrixImagePathParameter, composerParameter, publisherParameter, producerParameter, selectIntFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, uploadFileImagePathParameter, uploadFilePDFPathParameter, pagePercentageParameter, watermarkMatrixImagePathParameter, watermarkMatrixImageTextParameter, videoCategoryParameter, trackingNumberParameter, flagParameter);
        }
    
        public virtual int sp_UpdateCreateLinkPost(string title, string channel, Nullable<int> noOfClones, Nullable<int> views, Nullable<int> downloads, string fileSize, string trackingNo, Nullable<System.DateTime> postedDate, string category, Nullable<System.Guid> userId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var channelParameter = channel != null ?
                new ObjectParameter("Channel", channel) :
                new ObjectParameter("Channel", typeof(string));
    
            var noOfClonesParameter = noOfClones.HasValue ?
                new ObjectParameter("NoOfClones", noOfClones) :
                new ObjectParameter("NoOfClones", typeof(int));
    
            var viewsParameter = views.HasValue ?
                new ObjectParameter("Views", views) :
                new ObjectParameter("Views", typeof(int));
    
            var downloadsParameter = downloads.HasValue ?
                new ObjectParameter("Downloads", downloads) :
                new ObjectParameter("Downloads", typeof(int));
    
            var fileSizeParameter = fileSize != null ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(string));
    
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            var postedDateParameter = postedDate.HasValue ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCreateLinkPost", titleParameter, channelParameter, noOfClonesParameter, viewsParameter, downloadsParameter, fileSizeParameter, trackingNoParameter, postedDateParameter, categoryParameter, userIdParameter);
        }
    
        public virtual int sp_UpdateIntrepputedFiles(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, string interruptFilePath, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive, string fileName, string videoPath, string trackingNumber, string flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var cloneIdParameter = cloneId.HasValue ?
                new ObjectParameter("CloneId", cloneId) :
                new ObjectParameter("CloneId", typeof(System.Guid));
    
            var interruptFilePathParameter = interruptFilePath != null ?
                new ObjectParameter("InterruptFilePath", interruptFilePath) :
                new ObjectParameter("InterruptFilePath", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var videoPathParameter = videoPath != null ?
                new ObjectParameter("VideoPath", videoPath) :
                new ObjectParameter("VideoPath", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateIntrepputedFiles", userIDParameter, cloneIdParameter, interruptFilePathParameter, createdDateParameter, modifiedDateParameter, isActiveParameter, fileNameParameter, videoPathParameter, trackingNumberParameter, flagParameter);
        }
    
        public virtual ObjectResult<sp_EditPremiumCloneModel_Result> sp_EditPremiumCloneModel(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditPremiumCloneModel_Result>("sp_EditPremiumCloneModel", trackingNoParameter);
        }
    
        public virtual int sp_UpdatePremiumCloneModel(Nullable<System.Guid> userID, Nullable<System.Guid> cloneID, string title, string tags, string artistName, string albumTitle, string audioFilePath, byte[] imageFile, string composerName, string producer, string publisher, string selectedInterruptionFile, string interruptionStyle, string availableForDownload, string explicitContent, string type, string pDFFilePath, string videoFilePath, string pagePercentage, string rARFilePAth, string matrixImagePath, string creatorName, string trackingNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var cloneIDParameter = cloneID.HasValue ?
                new ObjectParameter("CloneID", cloneID) :
                new ObjectParameter("CloneID", typeof(System.Guid));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("Tags", tags) :
                new ObjectParameter("Tags", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("ArtistName", artistName) :
                new ObjectParameter("ArtistName", typeof(string));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("AlbumTitle", albumTitle) :
                new ObjectParameter("AlbumTitle", typeof(string));
    
            var audioFilePathParameter = audioFilePath != null ?
                new ObjectParameter("AudioFilePath", audioFilePath) :
                new ObjectParameter("AudioFilePath", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("ImageFile", imageFile) :
                new ObjectParameter("ImageFile", typeof(byte[]));
    
            var composerNameParameter = composerName != null ?
                new ObjectParameter("ComposerName", composerName) :
                new ObjectParameter("ComposerName", typeof(string));
    
            var producerParameter = producer != null ?
                new ObjectParameter("Producer", producer) :
                new ObjectParameter("Producer", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var selectedInterruptionFileParameter = selectedInterruptionFile != null ?
                new ObjectParameter("SelectedInterruptionFile", selectedInterruptionFile) :
                new ObjectParameter("SelectedInterruptionFile", typeof(string));
    
            var interruptionStyleParameter = interruptionStyle != null ?
                new ObjectParameter("InterruptionStyle", interruptionStyle) :
                new ObjectParameter("InterruptionStyle", typeof(string));
    
            var availableForDownloadParameter = availableForDownload != null ?
                new ObjectParameter("AvailableForDownload", availableForDownload) :
                new ObjectParameter("AvailableForDownload", typeof(string));
    
            var explicitContentParameter = explicitContent != null ?
                new ObjectParameter("ExplicitContent", explicitContent) :
                new ObjectParameter("ExplicitContent", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pDFFilePathParameter = pDFFilePath != null ?
                new ObjectParameter("PDFFilePath", pDFFilePath) :
                new ObjectParameter("PDFFilePath", typeof(string));
    
            var videoFilePathParameter = videoFilePath != null ?
                new ObjectParameter("VideoFilePath", videoFilePath) :
                new ObjectParameter("VideoFilePath", typeof(string));
    
            var pagePercentageParameter = pagePercentage != null ?
                new ObjectParameter("PagePercentage", pagePercentage) :
                new ObjectParameter("PagePercentage", typeof(string));
    
            var rARFilePAthParameter = rARFilePAth != null ?
                new ObjectParameter("RARFilePAth", rARFilePAth) :
                new ObjectParameter("RARFilePAth", typeof(string));
    
            var matrixImagePathParameter = matrixImagePath != null ?
                new ObjectParameter("MatrixImagePath", matrixImagePath) :
                new ObjectParameter("MatrixImagePath", typeof(string));
    
            var creatorNameParameter = creatorName != null ?
                new ObjectParameter("CreatorName", creatorName) :
                new ObjectParameter("CreatorName", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePremiumCloneModel", userIDParameter, cloneIDParameter, titleParameter, tagsParameter, artistNameParameter, albumTitleParameter, audioFilePathParameter, imageFileParameter, composerNameParameter, producerParameter, publisherParameter, selectedInterruptionFileParameter, interruptionStyleParameter, availableForDownloadParameter, explicitContentParameter, typeParameter, pDFFilePathParameter, videoFilePathParameter, pagePercentageParameter, rARFilePAthParameter, matrixImagePathParameter, creatorNameParameter, trackingNumberParameter);
        }
    
        public virtual ObjectResult<sp_EditBasicCloneModelNEW_Result> sp_EditBasicCloneModelNEW(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditBasicCloneModelNEW_Result>("sp_EditBasicCloneModelNEW", trackingNoParameter);
        }
    
        public virtual ObjectResult<sp_EditPremiumCloneModelNEW_Result> sp_EditPremiumCloneModelNEW(string trackingNo)
        {
            var trackingNoParameter = trackingNo != null ?
                new ObjectParameter("TrackingNo", trackingNo) :
                new ObjectParameter("TrackingNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EditPremiumCloneModelNEW_Result>("sp_EditPremiumCloneModelNEW", trackingNoParameter);
        }
    
        public virtual ObjectResult<sp_GetUserList_Result> sp_GetUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserList_Result>("sp_GetUserList");
        }
    
        public virtual int sp_InsUpdDelSocialNetwork_tbl(Nullable<System.Guid> iD, string categoryName, string accessToken, Nullable<System.DateTime> expires, Nullable<System.Guid> aphid, string insUpdDele, string refreshToken, Nullable<bool> isDeleted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            var expiresParameter = expires.HasValue ?
                new ObjectParameter("Expires", expires) :
                new ObjectParameter("Expires", typeof(System.DateTime));
    
            var aphidParameter = aphid.HasValue ?
                new ObjectParameter("Aphid", aphid) :
                new ObjectParameter("Aphid", typeof(System.Guid));
    
            var insUpdDeleParameter = insUpdDele != null ?
                new ObjectParameter("InsUpdDele", insUpdDele) :
                new ObjectParameter("InsUpdDele", typeof(string));
    
            var refreshTokenParameter = refreshToken != null ?
                new ObjectParameter("RefreshToken", refreshToken) :
                new ObjectParameter("RefreshToken", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsUpdDelSocialNetwork_tbl", iDParameter, categoryNameParameter, accessTokenParameter, expiresParameter, aphidParameter, insUpdDeleParameter, refreshTokenParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<sp_PostingDataMaterial_Result> sp_PostingDataMaterial(string trackno)
        {
            var tracknoParameter = trackno != null ?
                new ObjectParameter("Trackno", trackno) :
                new ObjectParameter("Trackno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PostingDataMaterial_Result>("sp_PostingDataMaterial", tracknoParameter);
        }
    
        public virtual int sp_InsertForgetPasswordDetail(string userName, string emailId, Nullable<System.Guid> token, Nullable<bool> status)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var tokenParameter = token.HasValue ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(System.Guid));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertForgetPasswordDetail", userNameParameter, emailIdParameter, tokenParameter, statusParameter);
        }
    
        public virtual int sp_ForgetPasswordChange(string token, string password)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ForgetPasswordChange", tokenParameter, passwordParameter);
        }
    
        public virtual int sp_InsertDataPlan(Nullable<System.Guid> userID, string storagePlan, string usedSpace, string freeSpace, Nullable<int> accountTypeId, Nullable<System.DateTime> expireDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var storagePlanParameter = storagePlan != null ?
                new ObjectParameter("StoragePlan", storagePlan) :
                new ObjectParameter("StoragePlan", typeof(string));
    
            var usedSpaceParameter = usedSpace != null ?
                new ObjectParameter("UsedSpace", usedSpace) :
                new ObjectParameter("UsedSpace", typeof(string));
    
            var freeSpaceParameter = freeSpace != null ?
                new ObjectParameter("FreeSpace", freeSpace) :
                new ObjectParameter("FreeSpace", typeof(string));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("AccountTypeId", accountTypeId) :
                new ObjectParameter("AccountTypeId", typeof(int));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDataPlan", userIDParameter, storagePlanParameter, usedSpaceParameter, freeSpaceParameter, accountTypeIdParameter, expireDateParameter);
        }
    
        public virtual int sp_ToolsInfo(string toolName, string images, Nullable<int> flag, Nullable<int> toolID, Nullable<System.Guid> userID, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modify, string fileName, string toolcontent, string toolInfo, Nullable<int> isActive)
        {
            var toolNameParameter = toolName != null ?
                new ObjectParameter("ToolName", toolName) :
                new ObjectParameter("ToolName", typeof(string));
    
            var imagesParameter = images != null ?
                new ObjectParameter("Images", images) :
                new ObjectParameter("Images", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var toolIDParameter = toolID.HasValue ?
                new ObjectParameter("ToolID", toolID) :
                new ObjectParameter("ToolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifyParameter = modify.HasValue ?
                new ObjectParameter("Modify", modify) :
                new ObjectParameter("Modify", typeof(System.DateTime));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var toolcontentParameter = toolcontent != null ?
                new ObjectParameter("Toolcontent", toolcontent) :
                new ObjectParameter("Toolcontent", typeof(string));
    
            var toolInfoParameter = toolInfo != null ?
                new ObjectParameter("ToolInfo", toolInfo) :
                new ObjectParameter("ToolInfo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToolsInfo", toolNameParameter, imagesParameter, flagParameter, toolIDParameter, userIDParameter, createdOnParameter, modifyParameter, fileNameParameter, toolcontentParameter, toolInfoParameter, isActiveParameter);
        }
    
        public virtual int sp_BasicGenerateClone1(Nullable<System.Guid> userID, Nullable<System.Guid> cloneId, byte[] interruptFile, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> isActive, string fileName, string videoPath, string trackingNumber, string flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var cloneIdParameter = cloneId.HasValue ?
                new ObjectParameter("CloneId", cloneId) :
                new ObjectParameter("CloneId", typeof(System.Guid));
    
            var interruptFileParameter = interruptFile != null ?
                new ObjectParameter("InterruptFile", interruptFile) :
                new ObjectParameter("InterruptFile", typeof(byte[]));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var videoPathParameter = videoPath != null ?
                new ObjectParameter("VideoPath", videoPath) :
                new ObjectParameter("VideoPath", typeof(string));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BasicGenerateClone1", userIDParameter, cloneIdParameter, interruptFileParameter, createdDateParameter, modifiedDateParameter, isActiveParameter, fileNameParameter, videoPathParameter, trackingNumberParameter, flagParameter);
        }
    }
}
